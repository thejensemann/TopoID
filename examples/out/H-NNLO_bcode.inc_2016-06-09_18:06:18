*--#[ BT1 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:05:57.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gh), p1 + p2 - v1 - v2, 5 -- 6
*   2: d4 (hb), -v2,               4 -- 3
*   3: d6 (gl), p1 - v2,           6 -- 4
*   4: d5 (gl), -p2 + v2,          5 -- 3
*   5: d3 (gh), p2 - v1,           6 -- 2
*   6: d2 (gh), p1 - v1,           1 -- 5
*   7: d1 (gh), -v1,               2 -- 1

#include fsymm.prc
#ifndef `symBT1'
#define symBT1 "0"
#endif

#define top "BT1"
#define pBT1 "p1,p2"
#define kBT1 "v1,v2"
#define dBT1 "d1,d2,d3,d4,d5,d6,d7"
#define vBT1 "x,[1-x]"

#procedure fBT1(MM,M2ep)
* write as factors
id BT1(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT1*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d4^(-a2)*d6^(-a3)*d5^(-a4)*d3^(-a5)*d2^(-a6)*d1^(-a7);
#endprocedure

#procedure gBT1(MM,M2ep)
* write as function
id BT1*d7^a1?*d4^a2?*d6^a3?*d5^a4?*d3^a5?*d2^a6?*d1^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT1(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT1(MM)
* expansion of factors
if (match(BT1)) 
  id d7 = -(`MM') - 2*p1.v1 - 2*p1.v2 - 2*p2.v1 - 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(BT1)) 
  id d4 = (`MM')*x + v2.v2;
.sort
if (match(BT1)) 
  id d6 = -2*p1.v2 + v2.v2;
.sort
if (match(BT1)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
if (match(BT1)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
if (match(BT1)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(BT1)) 
  id d1 = v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT1(MM)
* reduction of scalar products
if (match(BT1)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT1)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(BT1)) 
  id v1.v1 = d1;
.sort
if (match(BT1)) 
  id p1.v2 = (d4 - d6 - (`MM')*x)/2;
.sort
if (match(BT1)) 
  id p2.v2 = (d4 - d5 - (`MM')*x)/2;
.sort
if (match(BT1)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 + (`MM')*[1-x])/2;
.sort
if (match(BT1)) 
  id v2.v2 = d4 - (`MM')*x;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT1
* vanishing sub-topologies
id BT1(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT1(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id BT1(a1?,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
#endprocedure

#procedure yBT1
#redefine top "BT1"
* change notation
#call fBT1(1,1);
* symmetries
if (match(BT1));
repeat;

#if (`symBT1' <= 7)
#call fsymm(d7\\\,d4\\\,d6\\\,d5\\\,d3\\\,d2\\\,d1\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d2\\\,d3\\\,d1)
#endif

#if (`symBT1' <= 6)
#call fsymm(d4\\\,d6\\\,d5\\\,d3\\\,d2\\\,d1\,\
            d4\\\,d6\\\,d5\\\,d2\\\,d3\\\,d1\,\
            d4\\\,d5\\\,d6\\\,d3\\\,d2\\\,d1\,\
            d4\\\,d5\\\,d6\\\,d2\\\,d3\\\,d1)
#endif

#if (`symBT1' <= 5)
#call fsymm(d7\\\,d4\\\,d6\\\,d5\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d2\,\
            d3\\\,d4\\\,d6\\\,d5\\\,d7\,\
            d2\\\,d4\\\,d5\\\,d6\\\,d7)
#call fsymm(d7\\\,d4\\\,d6\\\,d5\\\,d1\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d1\,\
            d1\\\,d4\\\,d6\\\,d5\\\,d7\,\
            d1\\\,d4\\\,d5\\\,d6\\\,d7)
#call fsymm(d7\\\,d6\\\,d5\\\,d3\\\,d2\,\
            d7\\\,d5\\\,d6\\\,d2\\\,d3\,\
            d7\\\,d3\\\,d2\\\,d6\\\,d5\,\
            d7\\\,d2\\\,d3\\\,d5\\\,d6)
#call fsymm(d7\\\,d6\\\,d3\\\,d2\\\,d1\,\
            d7\\\,d5\\\,d2\\\,d3\\\,d1\,\
            d6\\\,d7\\\,d3\\\,d2\\\,d1\,\
            d5\\\,d7\\\,d2\\\,d3\\\,d1)
#endif

#if (`symBT1' <= 4)
#call fsymm(d7\\\,d4\\\,d6\\\,d2\,\
            d7\\\,d4\\\,d5\\\,d3\,\
            d3\\\,d4\\\,d5\\\,d7\,\
            d2\\\,d4\\\,d6\\\,d7)
#call fsymm(d7\\\,d6\\\,d5\\\,d3\,\
            d7\\\,d5\\\,d6\\\,d2\,\
            d7\\\,d3\\\,d2\\\,d6\,\
            d7\\\,d2\\\,d3\\\,d5\,\
            d6\\\,d3\\\,d2\\\,d7\,\
            d5\\\,d2\\\,d3\\\,d7\,\
            d3\\\,d6\\\,d5\\\,d7\,\
            d2\\\,d5\\\,d6\\\,d7)
#call fsymm(d6\\\,d5\\\,d3\\\,d2\,\
            d6\\\,d5\\\,d2\\\,d3\,\
            d5\\\,d6\\\,d3\\\,d2\,\
            d5\\\,d6\\\,d2\\\,d3\,\
            d3\\\,d2\\\,d6\\\,d5\,\
            d3\\\,d2\\\,d5\\\,d6\,\
            d2\\\,d3\\\,d6\\\,d5\,\
            d2\\\,d3\\\,d5\\\,d6)
#endif

#if (`symBT1' <= 3)
#call fsymm(d7\\\,d6\\\,d2\,\
            d7\\\,d5\\\,d3\,\
            d7\\\,d3\\\,d5\,\
            d7\\\,d2\\\,d6\,\
            d6\\\,d7\\\,d2\,\
            d6\\\,d2\\\,d7\,\
            d5\\\,d7\\\,d3\,\
            d5\\\,d3\\\,d7\,\
            d3\\\,d7\\\,d5\,\
            d3\\\,d5\\\,d7\,\
            d2\\\,d7\\\,d6\,\
            d2\\\,d6\\\,d7)
#endif

endrepeat;
endif;
* change notation
#call gBT1(1,1);
#endprocedure

#procedure sBT1
* discard vanishing sub-topologies
#call zBT1
.sort
* apply symmetries
#call yBT1
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] BT1 :



*--#[ BT10 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:05:58.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), -p1 + p2 + v1 + v2, 6 -- 5
*   2: d2 (gl), -p1 + v1,           5 -- 1
*   3: d3 (gl), -p2 - v1,           6 -- 2
*   4: d1 (gl), -v1,                2 -- 1
*   5: d6 (gl), p1 - v2,            6 -- 4
*   6: d5 (gl), p2 + v2,            5 -- 3
*   7: d4 (gl), -v2,                4 -- 3

#include fsymm.prc
#ifndef `symBT10'
#define symBT10 "0"
#endif

#define top "BT10"
#define pBT10 "p1,p2"
#define kBT10 "v1,v2"
#define dBT10 "d1,d2,d3,d4,d5,d6,d7"
#define vBT10 "x,[1+x]"

#procedure fBT10(MM,M2ep)
* write as factors
id BT10(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT10*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d2^(-a2)*d3^(-a3)*d1^(-a4)*d6^(-a5)*d5^(-a6)*d4^(-a7);
#endprocedure

#procedure gBT10(MM,M2ep)
* write as function
id BT10*d7^a1?*d2^a2?*d3^a3?*d1^a4?*d6^a5?*d5^a6?*d4^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT10(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT10(MM)
* expansion of factors
if (match(BT10)) 
  id d7 = -2*p1.v1 - 2*p1.v2 + 2*p2.v1 + 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2 + (`MM')*[1+x];
.sort
if (match(BT10)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(BT10)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(BT10)) 
  id d1 = v1.v1;
.sort
if (match(BT10)) 
  id d6 = -2*p1.v2 + v2.v2;
.sort
if (match(BT10)) 
  id d5 = 2*p2.v2 + v2.v2;
.sort
if (match(BT10)) 
  id d4 = v2.v2;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT10(MM)
* reduction of scalar products
if (match(BT10)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT10)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(BT10)) 
  id v1.v1 = d1;
.sort
if (match(BT10)) 
  id p1.v2 = (d4 - d6)/2;
.sort
if (match(BT10)) 
  id p2.v2 = (-d4 + d5)/2;
.sort
if (match(BT10)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 - (`MM')*[1+x])/2;
.sort
if (match(BT10)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT10
* vanishing sub-topologies
id BT10(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT10(a1?,a2?neg0_,a3?neg0_,a4?,a5?,a6?,a7?) = 0;
id BT10(a1?,a2?neg0_,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
id BT10(a1?,a2?,a3?neg0_,a4?,a5?neg0_,a6?,a7?) = 0;
id BT10(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?) = 0;
#endprocedure

#procedure yBT10
#redefine top "BT10"
* change notation
#call fBT10(1,1);
* symmetries
if (match(BT10));
repeat;

#if (`symBT10' <= 7)
#call fsymm(d7\\\,d2\\\,d3\\\,d1\\\,d6\\\,d5\\\,d4\,\
            d7\\\,d3\\\,d2\\\,d1\\\,d5\\\,d6\\\,d4\,\
            d7\\\,d6\\\,d5\\\,d4\\\,d2\\\,d3\\\,d1\,\
            d7\\\,d5\\\,d6\\\,d4\\\,d3\\\,d2\\\,d1)
#endif

#if (`symBT10' <= 6)
#call fsymm(d2\\\,d3\\\,d1\\\,d6\\\,d5\\\,d4\,\
            d2\\\,d3\\\,d1\\\,d5\\\,d6\\\,d4\,\
            d3\\\,d2\\\,d1\\\,d6\\\,d5\\\,d4\,\
            d3\\\,d2\\\,d1\\\,d5\\\,d6\\\,d4\,\
            d6\\\,d5\\\,d4\\\,d2\\\,d3\\\,d1\,\
            d6\\\,d5\\\,d4\\\,d3\\\,d2\\\,d1\,\
            d5\\\,d6\\\,d4\\\,d2\\\,d3\\\,d1\,\
            d5\\\,d6\\\,d4\\\,d3\\\,d2\\\,d1)
#endif

#if (`symBT10' <= 4)
#call fsymm(d7\\\,d2\\\,d1\\\,d5\,\
            d7\\\,d3\\\,d1\\\,d6\,\
            d7\\\,d1\\\,d2\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d6\,\
            d7\\\,d6\\\,d4\\\,d3\,\
            d7\\\,d5\\\,d4\\\,d2\,\
            d7\\\,d4\\\,d6\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d2)
#endif

#if (`symBT10' <= 3)
#call fsymm(d7\\\,d2\\\,d5\,\
            d7\\\,d2\\\,d4\,\
            d7\\\,d3\\\,d6\,\
            d7\\\,d3\\\,d4\,\
            d7\\\,d1\\\,d6\,\
            d7\\\,d1\\\,d5\,\
            d7\\\,d6\\\,d3\,\
            d7\\\,d6\\\,d1\,\
            d7\\\,d5\\\,d2\,\
            d7\\\,d5\\\,d1\,\
            d7\\\,d4\\\,d2\,\
            d7\\\,d4\\\,d3)
#endif

endrepeat;
endif;
* change notation
#call gBT10(1,1);
#endprocedure

#procedure sBT10
* discard vanishing sub-topologies
#call zBT10
.sort
* apply symmetries
#call yBT10
.sort
* substitute variables
mu replace_([1+x],1 + x);
.sort
#endprocedure

*--#] BT10 :



*--#[ BT11 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:05:60.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gl), -p1 + p2 + v1 + v2, 6 -- 5
*   2: d6 (hb), p1 - v2,            6 -- 4
*   3: d4 (gl), -v2,                4 -- 3
*   4: d5 (gl), p2 + v2,            5 -- 3
*   5: d3 (gl), -p2 - v1,           6 -- 2
*   6: d1 (gl), -v1,                2 -- 1
*   7: d2 (gl), -p1 + v1,           5 -- 1

#include fsymm.prc
#ifndef `symBT11'
#define symBT11 "0"
#endif

#define top "BT11"
#define pBT11 "p1,p2"
#define kBT11 "v1,v2"
#define dBT11 "d1,d2,d3,d4,d5,d6,d7"
#define vBT11 "x,[1-x]"

#procedure fBT11(MM,M2ep)
* write as factors
id BT11(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT11*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d4^(-a3)*d5^(-a4)*d3^(-a5)*d1^(-a6)*d2^(-a7);
#endprocedure

#procedure gBT11(MM,M2ep)
* write as function
id BT11*d7^a1?*d6^a2?*d4^a3?*d5^a4?*d3^a5?*d1^a6?*d2^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT11(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT11(MM)
* expansion of factors
if (match(BT11)) 
  id d7 = (`MM') - 2*p1.v1 - 2*p1.v2 + 2*p2.v1 + 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(BT11)) 
  id d6 = (`MM')*x - 2*p1.v2 + v2.v2;
.sort
if (match(BT11)) 
  id d4 = v2.v2;
.sort
if (match(BT11)) 
  id d5 = 2*p2.v2 + v2.v2;
.sort
if (match(BT11)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(BT11)) 
  id d1 = v1.v1;
.sort
if (match(BT11)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT11(MM)
* reduction of scalar products
if (match(BT11)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT11)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(BT11)) 
  id v1.v1 = d1;
.sort
if (match(BT11)) 
  id p1.v2 = (d4 - d6 + (`MM')*x)/2;
.sort
if (match(BT11)) 
  id p2.v2 = (-d4 + d5)/2;
.sort
if (match(BT11)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 - (`MM')*[1-x])/2;
.sort
if (match(BT11)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT11
* vanishing sub-topologies
id BT11(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id BT11(a1?neg0_,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id BT11(a1?neg0_,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
id BT11(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
id BT11(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
id BT11(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?neg0_) = 0;
#endprocedure

#procedure yBT11
#redefine top "BT11"
* change notation
#call fBT11(1,1);
* symmetries
if (match(BT11));
repeat;

#if (`symBT11' <= 6)
#call fsymm(d6\\\,d4\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d2\\\,d1\\\,d3)
#endif

#if (`symBT11' <= 5)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d3\,\
            d3\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d1\,\
            d1\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d2\,\
            d2\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d4\\\,d5\\\,d3\\\,d1\,\
            d7\\\,d1\\\,d3\\\,d5\\\,d4)
#call fsymm(d7\\\,d4\\\,d5\\\,d1\\\,d2\,\
            d7\\\,d1\\\,d2\\\,d4\\\,d5)
#call fsymm(d7\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d5\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d7\\\,d4\\\,d2\\\,d1\\\,d3\,\
            d4\\\,d7\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d2\\\,d1\\\,d3)
#endif

#if (`symBT11' <= 4)
#call fsymm(d7\\\,d6\\\,d3\\\,d1\,\
            d7\\\,d6\\\,d1\\\,d3)
#call fsymm(d7\\\,d4\\\,d5\\\,d3\,\
            d7\\\,d1\\\,d3\\\,d5\,\
            d5\\\,d1\\\,d3\\\,d7\,\
            d3\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d4\\\,d5\\\,d1\,\
            d7\\\,d1\\\,d3\\\,d4\,\
            d7\\\,d1\\\,d2\\\,d4\,\
            d4\\\,d1\\\,d3\\\,d7\,\
            d4\\\,d1\\\,d2\\\,d7\,\
            d1\\\,d4\\\,d5\\\,d7)
#endif

#if (`symBT11' <= 3)
#call fsymm(d7\\\,d6\\\,d3\,\
            d7\\\,d6\\\,d1\,\
            d3\\\,d6\\\,d7\,\
            d1\\\,d6\\\,d7)
#call fsymm(d7\\\,d4\\\,d1\,\
            d7\\\,d1\\\,d4\,\
            d4\\\,d7\\\,d1\,\
            d4\\\,d1\\\,d7\,\
            d1\\\,d7\\\,d4\,\
            d1\\\,d4\\\,d7)
#call fsymm(d7\\\,d5\\\,d3\,\
            d7\\\,d3\\\,d5\,\
            d5\\\,d7\\\,d3\,\
            d5\\\,d3\\\,d7\,\
            d3\\\,d7\\\,d5\,\
            d3\\\,d5\\\,d7)
#endif

endrepeat;
endif;
* change notation
#call gBT11(1,1);
#endprocedure

#procedure sBT11
* discard vanishing sub-topologies
#call zBT11
.sort
* apply symmetries
#call yBT11
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] BT11 :



*--#[ BT2 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:01.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), -p1 - p2 + v1 + v2, 6 -- 5
*   2: d1 (gl), -v1,                2 -- 1
*   3: d2 (gl), -p1 + v1,           5 -- 1
*   4: d3 (gl), p2 - v1,            6 -- 2
*   5: d4 (gl), -v2,                4 -- 3
*   6: d6 (gl), p1 - v2,            6 -- 4
*   7: d5 (gl), -p2 + v2,           5 -- 3

#include fsymm.prc
#ifndef `symBT2'
#define symBT2 "0"
#endif

#define top "BT2"
#define pBT2 "p1,p2"
#define kBT2 "v1,v2"
#define dBT2 "d1,d2,d3,d4,d5,d6,d7"
#define vBT2 "x,[1-x]"

#procedure fBT2(MM,M2ep)
* write as factors
id BT2(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT2*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d1^(-a2)*d2^(-a3)*d3^(-a4)*d4^(-a5)*d6^(-a6)*d5^(-a7);
#endprocedure

#procedure gBT2(MM,M2ep)
* write as function
id BT2*d7^a1?*d1^a2?*d2^a3?*d3^a4?*d4^a5?*d6^a6?*d5^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT2(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT2(MM)
* expansion of factors
if (match(BT2)) 
  id d7 = -2*p1.v1 - 2*p1.v2 - 2*p2.v1 - 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2 - (`MM')*[1-x];
.sort
if (match(BT2)) 
  id d1 = v1.v1;
.sort
if (match(BT2)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(BT2)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
if (match(BT2)) 
  id d4 = v2.v2;
.sort
if (match(BT2)) 
  id d6 = -2*p1.v2 + v2.v2;
.sort
if (match(BT2)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT2(MM)
* reduction of scalar products
if (match(BT2)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT2)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(BT2)) 
  id v1.v1 = d1;
.sort
if (match(BT2)) 
  id p1.v2 = (d4 - d6)/2;
.sort
if (match(BT2)) 
  id p2.v2 = (d4 - d5)/2;
.sort
if (match(BT2)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 + (`MM')*[1-x])/2;
.sort
if (match(BT2)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT2
* vanishing sub-topologies
id BT2(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT2(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id BT2(a1?,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
#endprocedure

#procedure yBT2
#redefine top "BT2"
* change notation
#call fBT2(1,1);
* symmetries
if (match(BT2));
repeat;

#if (`symBT2' <= 7)
#call fsymm(d7\\\,d1\\\,d2\\\,d3\\\,d4\\\,d6\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d2\\\,d4\\\,d5\\\,d6\,\
            d7\\\,d4\\\,d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d1\\\,d3\\\,d2)
#endif

#if (`symBT2' <= 6)
#call fsymm(d1\\\,d2\\\,d3\\\,d4\\\,d6\\\,d5\,\
            d1\\\,d2\\\,d3\\\,d4\\\,d5\\\,d6\,\
            d1\\\,d3\\\,d2\\\,d4\\\,d6\\\,d5\,\
            d1\\\,d3\\\,d2\\\,d4\\\,d5\\\,d6\,\
            d4\\\,d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d4\\\,d6\\\,d5\\\,d1\\\,d3\\\,d2\,\
            d4\\\,d5\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d4\\\,d5\\\,d6\\\,d1\\\,d3\\\,d2)
#endif

#if (`symBT2' <= 4)
#call fsymm(d7\\\,d1\\\,d2\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d6\,\
            d7\\\,d2\\\,d1\\\,d5\,\
            d7\\\,d3\\\,d1\\\,d6\,\
            d7\\\,d4\\\,d6\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d2\,\
            d7\\\,d6\\\,d4\\\,d3\,\
            d7\\\,d5\\\,d4\\\,d2)
#endif

#if (`symBT2' <= 3)
#call fsymm(d7\\\,d1\\\,d6\,\
            d7\\\,d1\\\,d5\,\
            d7\\\,d2\\\,d4\,\
            d7\\\,d2\\\,d5\,\
            d7\\\,d3\\\,d4\,\
            d7\\\,d3\\\,d6\,\
            d7\\\,d4\\\,d2\,\
            d7\\\,d4\\\,d3\,\
            d7\\\,d6\\\,d1\,\
            d7\\\,d6\\\,d3\,\
            d7\\\,d5\\\,d1\,\
            d7\\\,d5\\\,d2)
#endif

endrepeat;
endif;
* change notation
#call gBT2(1,1);
#endprocedure

#procedure sBT2
* discard vanishing sub-topologies
#call zBT2
.sort
* apply symmetries
#call yBT2
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] BT2 :



*--#[ BT3 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:02.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d6 (hb), p1 - v1 + v2, 5 -- 4
*   2: d7 (gl), v1 - v2,      6 -- 4
*   3: d5 (gl), -p2 + v2,     6 -- 3
*   4: d4 (gl), -v2,          5 -- 3
*   5: d2 (gl), -p1 + v1,     5 -- 1
*   6: d1 (gl), -v1,          2 -- 1
*   7: d3 (gl), p2 - v1,      6 -- 2

#include fsymm.prc
#ifndef `symBT3'
#define symBT3 "0"
#endif

#define top "BT3"
#define pBT3 "p1,p2"
#define kBT3 "v1,v2"
#define dBT3 "d1,d2,d3,d4,d5,d6,d7"
#define vBT3 "x"

#procedure fBT3(MM,M2ep)
* write as factors
id BT3(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT3*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d6^(-a1)*d7^(-a2)*d5^(-a3)*d4^(-a4)*d2^(-a5)*d1^(-a6)*d3^(-a7);
#endprocedure

#procedure gBT3(MM,M2ep)
* write as function
id BT3*d6^a1?*d7^a2?*d5^a3?*d4^a4?*d2^a5?*d1^a6?*d3^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT3(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT3(MM)
* expansion of factors
if (match(BT3)) 
  id d6 = (`MM')*x - 2*p1.v1 + 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT3)) 
  id d7 = v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT3)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
if (match(BT3)) 
  id d4 = v2.v2;
.sort
if (match(BT3)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(BT3)) 
  id d1 = v1.v1;
.sort
if (match(BT3)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT3(MM)
* reduction of scalar products
if (match(BT3)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT3)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(BT3)) 
  id v1.v1 = d1;
.sort
if (match(BT3)) 
  id p1.v2 = (d1 - d2 + d6 - d7 - (`MM')*x)/2;
.sort
if (match(BT3)) 
  id p2.v2 = (d4 - d5)/2;
.sort
if (match(BT3)) 
  id v1.v2 = (d1 + d4 - d7)/2;
.sort
if (match(BT3)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT3
* vanishing sub-topologies
id BT3(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT3(a1?,a2?,a3?neg0_,a4?,a5?,a6?,a7?) = 0;
id BT3(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
#endprocedure

#procedure yBT3
#redefine top "BT3"
* change notation
#call fBT3(1,1);
* symmetries
if (match(BT3));
repeat;

#if (`symBT3' <= 6)
#call fsymm(d6\\\,d7\\\,d5\\\,d4\\\,d1\\\,d3\,\
            d6\\\,d7\\\,d1\\\,d3\\\,d5\\\,d4)
#endif

#if (`symBT3' <= 5)
#call fsymm(d6\\\,d7\\\,d4\\\,d2\\\,d1\,\
            d6\\\,d7\\\,d4\\\,d1\\\,d2)
#call fsymm(d6\\\,d7\\\,d2\\\,d1\\\,d3\,\
            d6\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d6\\\,d1\\\,d2\\\,d4\\\,d5)
#call fsymm(d6\\\,d5\\\,d2\\\,d1\\\,d3\,\
            d6\\\,d5\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d7\\\,d2\\\,d1\\\,d5\\\,d4)
#call fsymm(d7\\\,d5\\\,d2\\\,d1\\\,d3\,\
            d5\\\,d7\\\,d2\\\,d1\\\,d3)
#call fsymm(d7\\\,d4\\\,d2\\\,d1\\\,d3\,\
            d7\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d2\\\,d1\\\,d3\,\
            d4\\\,d7\\\,d3\\\,d1\\\,d2)
#endif

#if (`symBT3' <= 4)
#call fsymm(d6\\\,d7\\\,d5\\\,d2\,\
            d6\\\,d7\\\,d2\\\,d5)
#call fsymm(d6\\\,d5\\\,d4\\\,d1\,\
            d6\\\,d1\\\,d2\\\,d5\,\
            d6\\\,d1\\\,d3\\\,d5)
#call fsymm(d6\\\,d5\\\,d4\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d2\,\
            d6\\\,d2\\\,d1\\\,d4\,\
            d6\\\,d1\\\,d2\\\,d4)
#call fsymm(d7\\\,d5\\\,d4\\\,d2\,\
            d7\\\,d2\\\,d1\\\,d5\,\
            d5\\\,d2\\\,d1\\\,d7\,\
            d2\\\,d5\\\,d4\\\,d7)
#call fsymm(d6\\\,d7\\\,d5\\\,d3\,\
            d6\\\,d7\\\,d4\\\,d2\,\
            d6\\\,d7\\\,d4\\\,d1\,\
            d6\\\,d7\\\,d2\\\,d4\,\
            d6\\\,d7\\\,d1\\\,d4\,\
            d6\\\,d7\\\,d3\\\,d5)
#endif

#if (`symBT3' <= 3)
#call fsymm(d7\\\,d5\\\,d2\,\
            d7\\\,d2\\\,d5\,\
            d5\\\,d7\\\,d2\,\
            d5\\\,d2\\\,d7\,\
            d2\\\,d7\\\,d5\,\
            d2\\\,d5\\\,d7)
#call fsymm(d6\\\,d5\\\,d2\,\
            d6\\\,d5\\\,d3\,\
            d6\\\,d4\\\,d2\,\
            d6\\\,d4\\\,d1\,\
            d6\\\,d2\\\,d5\,\
            d6\\\,d2\\\,d4\,\
            d6\\\,d1\\\,d4\,\
            d6\\\,d3\\\,d5)
#endif

endrepeat;
endif;
* change notation
#call gBT3(1,1);
#endprocedure

#procedure sBT3
* discard vanishing sub-topologies
#call zBT3
.sort
* apply symmetries
#call yBT3
.sort
#endprocedure

*--#] BT3 :



*--#[ BT4 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:04.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d4 (gh), -v2,           5 -- 3
*   2: d5 (gh), p2 - v2,       3 -- 6
*   3: d7 (gh), v1 - v2,       6 -- 4
*   4: d6 (gh), -p1 + v1 - v2, 4 -- 5
*   5: d1 (hb), -v1,           2 -- 1
*   6: d2 (gl), -p1 + v1,      5 -- 1
*   7: d3 (gl), p2 - v1,       6 -- 2

#include fsymm.prc
#ifndef `symBT4'
#define symBT4 "0"
#endif

#define top "BT4"
#define pBT4 "p1,p2"
#define kBT4 "v1,v2"
#define dBT4 "d1,d2,d3,d4,d5,d6,d7"
#define vBT4 "x"

#procedure fBT4(MM,M2ep)
* write as factors
id BT4(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT4*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d4^(-a1)*d5^(-a2)*d7^(-a3)*d6^(-a4)*d1^(-a5)*d2^(-a6)*d3^(-a7);
#endprocedure

#procedure gBT4(MM,M2ep)
* write as function
id BT4*d4^a1?*d5^a2?*d7^a3?*d6^a4?*d1^a5?*d2^a6?*d3^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT4(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT4(MM)
* expansion of factors
if (match(BT4)) 
  id d4 = v2.v2;
.sort
if (match(BT4)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
if (match(BT4)) 
  id d7 = v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT4)) 
  id d6 = -2*p1.v1 + 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT4)) 
  id d1 = (`MM')*x + v1.v1;
.sort
if (match(BT4)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(BT4)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT4(MM)
* reduction of scalar products
if (match(BT4)) 
  id p1.v1 = (d1 - d2 - (`MM')*x)/2;
.sort
if (match(BT4)) 
  id p2.v1 = (d1 - d3 - (`MM')*x)/2;
.sort
if (match(BT4)) 
  id v1.v1 = d1 - (`MM')*x;
.sort
if (match(BT4)) 
  id p1.v2 = (d1 - d2 + d6 - d7 - (`MM')*x)/2;
.sort
if (match(BT4)) 
  id p2.v2 = (d4 - d5)/2;
.sort
if (match(BT4)) 
  id v1.v2 = (d1 + d4 - d7 - (`MM')*x)/2;
.sort
if (match(BT4)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT4
* vanishing sub-topologies
id BT4(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id BT4(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id BT4(a1?,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
#endprocedure

#procedure yBT4
#redefine top "BT4"
* change notation
#call fBT4(1,1);
* symmetries
if (match(BT4));
repeat;

#if (`symBT4' <= 7)
#call fsymm(d4\\\,d5\\\,d7\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d6\\\,d4\\\,d5\\\,d1\\\,d3\\\,d2)
#endif

#if (`symBT4' <= 6)
#call fsymm(d4\\\,d5\\\,d7\\\,d6\\\,d2\\\,d3\,\
            d5\\\,d4\\\,d6\\\,d7\\\,d3\\\,d2\,\
            d7\\\,d6\\\,d4\\\,d5\\\,d3\\\,d2\,\
            d6\\\,d7\\\,d5\\\,d4\\\,d2\\\,d3)
#endif

#if (`symBT4' <= 5)
#call fsymm(d4\\\,d5\\\,d7\\\,d1\\\,d3\,\
            d5\\\,d4\\\,d7\\\,d1\\\,d3\,\
            d7\\\,d6\\\,d4\\\,d1\\\,d2\,\
            d6\\\,d7\\\,d4\\\,d1\\\,d2)
#call fsymm(d4\\\,d7\\\,d1\\\,d2\\\,d3\,\
            d4\\\,d7\\\,d1\\\,d3\\\,d2\,\
            d7\\\,d4\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d4\\\,d1\\\,d3\\\,d2)
#call fsymm(d4\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d5\\\,d7\\\,d1\\\,d3\\\,d2\,\
            d7\\\,d5\\\,d1\\\,d3\\\,d2\,\
            d6\\\,d4\\\,d1\\\,d2\\\,d3)
#call fsymm(d5\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d5\\\,d6\\\,d1\\\,d3\\\,d2\,\
            d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d6\\\,d5\\\,d1\\\,d3\\\,d2)
#endif

#if (`symBT4' <= 4)
#call fsymm(d4\\\,d5\\\,d7\\\,d2\,\
            d4\\\,d5\\\,d2\\\,d7\,\
            d5\\\,d4\\\,d6\\\,d3\,\
            d5\\\,d4\\\,d3\\\,d6\,\
            d7\\\,d6\\\,d4\\\,d3\,\
            d7\\\,d6\\\,d3\\\,d4\,\
            d6\\\,d7\\\,d5\\\,d2\,\
            d6\\\,d7\\\,d2\\\,d5)
#call fsymm(d4\\\,d7\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d1\\\,d3\,\
            d4\\\,d6\\\,d1\\\,d2\,\
            d5\\\,d7\\\,d1\\\,d3\,\
            d7\\\,d4\\\,d1\\\,d2\,\
            d7\\\,d4\\\,d1\\\,d3\,\
            d7\\\,d5\\\,d1\\\,d3\,\
            d6\\\,d4\\\,d1\\\,d2)
#call fsymm(d4\\\,d7\\\,d2\\\,d3\,\
            d4\\\,d7\\\,d3\\\,d2\,\
            d5\\\,d6\\\,d2\\\,d3\,\
            d5\\\,d6\\\,d3\\\,d2\,\
            d7\\\,d4\\\,d2\\\,d3\,\
            d7\\\,d4\\\,d3\\\,d2\,\
            d6\\\,d5\\\,d2\\\,d3\,\
            d6\\\,d5\\\,d3\\\,d2)
#endif

#if (`symBT4' <= 3)
#call fsymm(d4\\\,d6\\\,d3\,\
            d4\\\,d3\\\,d6\,\
            d5\\\,d7\\\,d2\,\
            d5\\\,d2\\\,d7\,\
            d7\\\,d5\\\,d2\,\
            d7\\\,d2\\\,d5\,\
            d6\\\,d4\\\,d3\,\
            d6\\\,d3\\\,d4\,\
            d2\\\,d5\\\,d7\,\
            d2\\\,d7\\\,d5\,\
            d3\\\,d4\\\,d6\,\
            d3\\\,d6\\\,d4)
#endif

endrepeat;
endif;
* change notation
#call gBT4(1,1);
#endprocedure

#procedure sBT4
* discard vanishing sub-topologies
#call zBT4
.sort
* apply symmetries
#call yBT4
.sort
#endprocedure

*--#] BT4 :



*--#[ BT5 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:05.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), p1 - p2 + v1 - v2, 6 -- 4
*   2: d6 (gl), -p1 - v1 + v2,     5 -- 4
*   3: d5 (gl), -p1 + v2,          6 -- 3
*   4: d4 (gl), -v2,               5 -- 3
*   5: d3 (gl), p2 - v1,           6 -- 2
*   6: d2 (gl), p1 + v1,           5 -- 1
*   7: d1 (gl), -v1,               2 -- 1

#include fsymm.prc
#ifndef `symBT5'
#define symBT5 "0"
#endif

#define top "BT5"
#define pBT5 "p1,p2"
#define kBT5 "v1,v2"
#define dBT5 "d1,d2,d3,d4,d5,d6,d7"
#define vBT5 "x,[1+x]"

#procedure fBT5(MM,M2ep)
* write as factors
id BT5(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT5*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d5^(-a3)*d4^(-a4)*d3^(-a5)*d2^(-a6)*d1^(-a7);
#endprocedure

#procedure gBT5(MM,M2ep)
* write as function
id BT5*d7^a1?*d6^a2?*d5^a3?*d4^a4?*d3^a5?*d2^a6?*d1^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT5(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT5(MM)
* expansion of factors
if (match(BT5)) 
  id d7 = 2*p1.v1 - 2*p1.v2 - 2*p2.v1 + 2*p2.v2 + v1.v1 - 2*v1.v2 + v2.v2 + (`MM')*[1+x];
.sort
if (match(BT5)) 
  id d6 = 2*p1.v1 - 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT5)) 
  id d5 = -2*p1.v2 + v2.v2;
.sort
if (match(BT5)) 
  id d4 = v2.v2;
.sort
if (match(BT5)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
if (match(BT5)) 
  id d2 = 2*p1.v1 + v1.v1;
.sort
if (match(BT5)) 
  id d1 = v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT5(MM)
* reduction of scalar products
if (match(BT5)) 
  id p1.v1 = (-d1 + d2)/2;
.sort
if (match(BT5)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(BT5)) 
  id v1.v1 = d1;
.sort
if (match(BT5)) 
  id p1.v2 = (d4 - d5)/2;
.sort
if (match(BT5)) 
  id p2.v2 = (d1 - d3 - d6 + d7 - (`MM')*[1+x])/2;
.sort
if (match(BT5)) 
  id v1.v2 = (d2 + d5 - d6)/2;
.sort
if (match(BT5)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT5
* vanishing sub-topologies
id BT5(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT5(a1?,a2?,a3?neg0_,a4?,a5?,a6?,a7?) = 0;
id BT5(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
#endprocedure

#procedure yBT5
#redefine top "BT5"
* change notation
#call fBT5(1,1);
* symmetries
if (match(BT5));
repeat;

#if (`symBT5' <= 6)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d7\\\,d6\\\,d2\\\,d1\\\,d5\\\,d4)
#endif

#if (`symBT5' <= 5)
#call fsymm(d7\\\,d6\\\,d5\\\,d3\\\,d1\,\
            d7\\\,d6\\\,d5\\\,d1\\\,d3)
#call fsymm(d7\\\,d6\\\,d3\\\,d2\\\,d1\,\
            d7\\\,d6\\\,d2\\\,d3\\\,d1)
#call fsymm(d7\\\,d5\\\,d4\\\,d3\\\,d1\,\
            d7\\\,d3\\\,d1\\\,d5\\\,d4)
#call fsymm(d7\\\,d4\\\,d3\\\,d2\\\,d1\,\
            d7\\\,d4\\\,d2\\\,d3\\\,d1)
#call fsymm(d6\\\,d5\\\,d4\\\,d3\\\,d1\,\
            d6\\\,d1\\\,d3\\\,d4\\\,d5)
#call fsymm(d6\\\,d4\\\,d3\\\,d2\\\,d1\,\
            d4\\\,d6\\\,d3\\\,d2\\\,d1)
#call fsymm(d6\\\,d5\\\,d3\\\,d2\\\,d1\,\
            d6\\\,d5\\\,d2\\\,d3\\\,d1\,\
            d5\\\,d6\\\,d3\\\,d2\\\,d1\,\
            d5\\\,d6\\\,d2\\\,d3\\\,d1)
#endif

#if (`symBT5' <= 4)
#call fsymm(d7\\\,d6\\\,d4\\\,d3\,\
            d7\\\,d6\\\,d3\\\,d4)
#call fsymm(d7\\\,d5\\\,d4\\\,d1\,\
            d7\\\,d3\\\,d1\\\,d4\,\
            d7\\\,d2\\\,d1\\\,d4)
#call fsymm(d7\\\,d5\\\,d4\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d3\,\
            d7\\\,d3\\\,d1\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d5)
#call fsymm(d6\\\,d5\\\,d4\\\,d3\,\
            d6\\\,d1\\\,d3\\\,d4\,\
            d4\\\,d1\\\,d3\\\,d6\,\
            d3\\\,d5\\\,d4\\\,d6)
#call fsymm(d7\\\,d6\\\,d5\\\,d3\,\
            d7\\\,d6\\\,d5\\\,d1\,\
            d7\\\,d6\\\,d4\\\,d2\,\
            d7\\\,d6\\\,d3\\\,d5\,\
            d7\\\,d6\\\,d2\\\,d4\,\
            d7\\\,d6\\\,d1\\\,d5)
#endif

#if (`symBT5' <= 3)
#call fsymm(d6\\\,d4\\\,d3\,\
            d6\\\,d3\\\,d4\,\
            d4\\\,d6\\\,d3\,\
            d4\\\,d3\\\,d6\,\
            d3\\\,d6\\\,d4\,\
            d3\\\,d4\\\,d6)
#call fsymm(d7\\\,d5\\\,d3\,\
            d7\\\,d5\\\,d1\,\
            d7\\\,d4\\\,d3\,\
            d7\\\,d4\\\,d2\,\
            d7\\\,d3\\\,d5\,\
            d7\\\,d3\\\,d4\,\
            d7\\\,d2\\\,d4\,\
            d7\\\,d1\\\,d5)
#endif

endrepeat;
endif;
* change notation
#call gBT5(1,1);
#endprocedure

#procedure sBT5
* discard vanishing sub-topologies
#call zBT5
.sort
* apply symmetries
#call yBT5
.sort
* substitute variables
mu replace_([1+x],1 + x);
.sort
#endprocedure

*--#] BT5 :



*--#[ BT6 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:07.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d6 (hb), -p1 - v1 + v2,     5 -- 4
*   2: d7 (gl), p1 - p2 + v1 - v2, 6 -- 4
*   3: d5 (gl), -p1 + v2,          6 -- 3
*   4: d4 (gl), -v2,               5 -- 3
*   5: d2 (gl), p1 + v1,           5 -- 1
*   6: d1 (gl), -v1,               2 -- 1
*   7: d3 (gl), p2 - v1,           6 -- 2

#include fsymm.prc
#ifndef `symBT6'
#define symBT6 "0"
#endif

#define top "BT6"
#define pBT6 "p1,p2"
#define kBT6 "v1,v2"
#define dBT6 "d1,d2,d3,d4,d5,d6,d7"
#define vBT6 "x,[1-x]"

#procedure fBT6(MM,M2ep)
* write as factors
id BT6(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT6*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d6^(-a1)*d7^(-a2)*d5^(-a3)*d4^(-a4)*d2^(-a5)*d1^(-a6)*d3^(-a7);
#endprocedure

#procedure gBT6(MM,M2ep)
* write as function
id BT6*d6^a1?*d7^a2?*d5^a3?*d4^a4?*d2^a5?*d1^a6?*d3^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT6(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT6(MM)
* expansion of factors
if (match(BT6)) 
  id d6 = (`MM')*x + 2*p1.v1 - 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT6)) 
  id d7 = (`MM') + 2*p1.v1 - 2*p1.v2 - 2*p2.v1 + 2*p2.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT6)) 
  id d5 = -2*p1.v2 + v2.v2;
.sort
if (match(BT6)) 
  id d4 = v2.v2;
.sort
if (match(BT6)) 
  id d2 = 2*p1.v1 + v1.v1;
.sort
if (match(BT6)) 
  id d1 = v1.v1;
.sort
if (match(BT6)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT6(MM)
* reduction of scalar products
if (match(BT6)) 
  id p1.v1 = (-d1 + d2)/2;
.sort
if (match(BT6)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(BT6)) 
  id v1.v1 = d1;
.sort
if (match(BT6)) 
  id p1.v2 = (d4 - d5)/2;
.sort
if (match(BT6)) 
  id p2.v2 = (d1 - d3 - d6 + d7 - (`MM')*[1-x])/2;
.sort
if (match(BT6)) 
  id v1.v2 = (d2 + d5 - d6 + (`MM')*x)/2;
.sort
if (match(BT6)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT6
* vanishing sub-topologies
id BT6(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT6(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id BT6(a1?,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
#endprocedure

#procedure yBT6
#redefine top "BT6"
* change notation
#call fBT6(1,1);
* symmetries
if (match(BT6));
repeat;

#if (`symBT6' <= 6)
#call fsymm(d6\\\,d7\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d6\\\,d7\\\,d2\\\,d1\\\,d5\\\,d4)
#endif

#if (`symBT6' <= 5)
#call fsymm(d6\\\,d7\\\,d5\\\,d1\\\,d3\,\
            d6\\\,d7\\\,d5\\\,d3\\\,d1)
#call fsymm(d6\\\,d7\\\,d2\\\,d1\\\,d3\,\
            d6\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d5\\\,d4\\\,d1\\\,d3\,\
            d6\\\,d1\\\,d3\\\,d5\\\,d4)
#call fsymm(d6\\\,d5\\\,d2\\\,d1\\\,d3\,\
            d6\\\,d5\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d5\\\,d4\\\,d1\\\,d3\,\
            d7\\\,d3\\\,d1\\\,d4\\\,d5)
#call fsymm(d7\\\,d5\\\,d2\\\,d1\\\,d3\,\
            d5\\\,d7\\\,d2\\\,d1\\\,d3)
#call fsymm(d7\\\,d4\\\,d2\\\,d1\\\,d3\,\
            d7\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d2\\\,d1\\\,d3\,\
            d4\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d6\\\,d5\\\,d4\\\,d1\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d2\\\,d1\,\
            d6\\\,d4\\\,d5\\\,d1\\\,d2\,\
            d6\\\,d2\\\,d1\\\,d5\\\,d4\,\
            d6\\\,d2\\\,d1\\\,d4\\\,d5\,\
            d6\\\,d1\\\,d2\\\,d5\\\,d4\,\
            d6\\\,d1\\\,d2\\\,d4\\\,d5)
#endif

#if (`symBT6' <= 4)
#call fsymm(d6\\\,d7\\\,d4\\\,d3\,\
            d6\\\,d7\\\,d3\\\,d4)
#call fsymm(d7\\\,d5\\\,d4\\\,d2\,\
            d7\\\,d2\\\,d1\\\,d5\,\
            d5\\\,d2\\\,d1\\\,d7\,\
            d2\\\,d5\\\,d4\\\,d7)
#call fsymm(d6\\\,d7\\\,d5\\\,d1\,\
            d6\\\,d7\\\,d5\\\,d3\,\
            d6\\\,d7\\\,d4\\\,d2\,\
            d6\\\,d7\\\,d2\\\,d4\,\
            d6\\\,d7\\\,d1\\\,d5\,\
            d6\\\,d7\\\,d3\\\,d5)
#call fsymm(d7\\\,d5\\\,d4\\\,d1\,\
            d7\\\,d2\\\,d1\\\,d4\,\
            d7\\\,d3\\\,d1\\\,d4\,\
            d4\\\,d2\\\,d1\\\,d7\,\
            d4\\\,d3\\\,d1\\\,d7\,\
            d1\\\,d5\\\,d4\\\,d7)
#call fsymm(d6\\\,d5\\\,d4\\\,d2\,\
            d6\\\,d5\\\,d4\\\,d1\,\
            d6\\\,d4\\\,d5\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d1\,\
            d6\\\,d2\\\,d1\\\,d5\,\
            d6\\\,d2\\\,d1\\\,d4\,\
            d6\\\,d1\\\,d2\\\,d5\,\
            d6\\\,d1\\\,d2\\\,d4\,\
            d6\\\,d1\\\,d3\\\,d5\,\
            d6\\\,d3\\\,d1\\\,d5)
#endif

#if (`symBT6' <= 3)
#call fsymm(d7\\\,d5\\\,d2\,\
            d7\\\,d2\\\,d5\,\
            d5\\\,d7\\\,d2\,\
            d5\\\,d2\\\,d7\,\
            d2\\\,d7\\\,d5\,\
            d2\\\,d5\\\,d7)
#call fsymm(d7\\\,d4\\\,d1\,\
            d7\\\,d1\\\,d4\,\
            d4\\\,d7\\\,d1\,\
            d4\\\,d1\\\,d7\,\
            d1\\\,d7\\\,d4\,\
            d1\\\,d4\\\,d7)
#call fsymm(d6\\\,d5\\\,d2\,\
            d6\\\,d5\\\,d1\,\
            d6\\\,d5\\\,d3\,\
            d6\\\,d4\\\,d2\,\
            d6\\\,d4\\\,d1\,\
            d6\\\,d2\\\,d5\,\
            d6\\\,d2\\\,d4\,\
            d6\\\,d1\\\,d5\,\
            d6\\\,d1\\\,d4\,\
            d6\\\,d3\\\,d5)
#endif

endrepeat;
endif;
* change notation
#call gBT6(1,1);
#endprocedure

#procedure sBT6
* discard vanishing sub-topologies
#call zBT6
.sort
* apply symmetries
#call yBT6
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] BT6 :



*--#[ BT7 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:09.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gl), p1 - p2 + v1 - v2, 6 -- 4
*   2: d6 (gl), -p1 - v1 + v2,     5 -- 4
*   3: d5 (gl), -p1 + v2,          6 -- 3
*   4: d4 (gl), -v2,               5 -- 3
*   5: d3 (hb), p2 - v1,           6 -- 2
*   6: d1 (gl), -v1,               2 -- 1
*   7: d2 (gl), p1 + v1,           5 -- 1

#include fsymm.prc
#ifndef `symBT7'
#define symBT7 "0"
#endif

#define top "BT7"
#define pBT7 "p1,p2"
#define kBT7 "v1,v2"
#define dBT7 "d1,d2,d3,d4,d5,d6,d7"
#define vBT7 "x,[1-x]"

#procedure fBT7(MM,M2ep)
* write as factors
id BT7(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT7*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d5^(-a3)*d4^(-a4)*d3^(-a5)*d1^(-a6)*d2^(-a7);
#endprocedure

#procedure gBT7(MM,M2ep)
* write as function
id BT7*d7^a1?*d6^a2?*d5^a3?*d4^a4?*d3^a5?*d1^a6?*d2^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT7(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT7(MM)
* expansion of factors
if (match(BT7)) 
  id d7 = (`MM') + 2*p1.v1 - 2*p1.v2 - 2*p2.v1 + 2*p2.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT7)) 
  id d6 = 2*p1.v1 - 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(BT7)) 
  id d5 = -2*p1.v2 + v2.v2;
.sort
if (match(BT7)) 
  id d4 = v2.v2;
.sort
if (match(BT7)) 
  id d3 = (`MM')*x - 2*p2.v1 + v1.v1;
.sort
if (match(BT7)) 
  id d1 = v1.v1;
.sort
if (match(BT7)) 
  id d2 = 2*p1.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT7(MM)
* reduction of scalar products
if (match(BT7)) 
  id p1.v1 = (-d1 + d2)/2;
.sort
if (match(BT7)) 
  id p2.v1 = (d1 - d3 + (`MM')*x)/2;
.sort
if (match(BT7)) 
  id v1.v1 = d1;
.sort
if (match(BT7)) 
  id p1.v2 = (d4 - d5)/2;
.sort
if (match(BT7)) 
  id p2.v2 = (d1 - d3 - d6 + d7 - (`MM')*[1-x])/2;
.sort
if (match(BT7)) 
  id v1.v2 = (d2 + d5 - d6)/2;
.sort
if (match(BT7)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT7
* vanishing sub-topologies
id BT7(a1?,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
id BT7(a1?neg0_,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id BT7(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
id BT7(a1?,a2?,a3?neg0_,a4?neg0_,a5?,a6?,a7?) = 0;
id BT7(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
#endprocedure

#procedure yBT7
#redefine top "BT7"
* change notation
#call fBT7(1,1);
* symmetries
if (match(BT7));
repeat;

#if (`symBT7' <= 6)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d3\\\,d2\,\
            d5\\\,d4\\\,d7\\\,d6\\\,d3\\\,d2)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d1\\\,d2\,\
            d7\\\,d6\\\,d2\\\,d1\\\,d4\\\,d5)
#endif

#if (`symBT7' <= 5)
#call fsymm(d7\\\,d6\\\,d5\\\,d3\\\,d1\,\
            d6\\\,d7\\\,d5\\\,d3\\\,d1)
#call fsymm(d7\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d5\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d5\\\,d6\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d6\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d1\,\
            d7\\\,d6\\\,d2\\\,d1\\\,d4\,\
            d4\\\,d5\\\,d6\\\,d7\\\,d1\,\
            d1\\\,d2\\\,d6\\\,d7\\\,d4)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d2\,\
            d7\\\,d6\\\,d2\\\,d1\\\,d5\,\
            d5\\\,d4\\\,d7\\\,d6\\\,d2\,\
            d2\\\,d1\\\,d7\\\,d6\\\,d5)
#endif

#if (`symBT7' <= 4)
#call fsymm(d7\\\,d6\\\,d5\\\,d3\,\
            d6\\\,d7\\\,d5\\\,d3\,\
            d5\\\,d4\\\,d7\\\,d3\,\
            d4\\\,d5\\\,d7\\\,d3)
#call fsymm(d7\\\,d5\\\,d3\\\,d1\,\
            d6\\\,d5\\\,d3\\\,d1\,\
            d5\\\,d7\\\,d3\\\,d1\,\
            d5\\\,d6\\\,d3\\\,d1)
#call fsymm(d7\\\,d4\\\,d3\\\,d2\,\
            d6\\\,d5\\\,d3\\\,d2\,\
            d5\\\,d6\\\,d3\\\,d2\,\
            d4\\\,d7\\\,d3\\\,d2)
#call fsymm(d7\\\,d6\\\,d5\\\,d2\,\
            d7\\\,d6\\\,d2\\\,d5\,\
            d5\\\,d4\\\,d7\\\,d2\,\
            d5\\\,d4\\\,d2\\\,d7\,\
            d2\\\,d1\\\,d7\\\,d5\,\
            d2\\\,d1\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d1\,\
            d7\\\,d6\\\,d1\\\,d4\,\
            d4\\\,d5\\\,d7\\\,d1\,\
            d4\\\,d5\\\,d1\\\,d7\,\
            d1\\\,d2\\\,d7\\\,d4\,\
            d1\\\,d2\\\,d4\\\,d7)
#endif

#if (`symBT7' <= 3)
#call fsymm(d7\\\,d5\\\,d3\,\
            d7\\\,d4\\\,d3\,\
            d6\\\,d5\\\,d3\,\
            d5\\\,d7\\\,d3\,\
            d5\\\,d6\\\,d3\,\
            d4\\\,d7\\\,d3)
#endif

endrepeat;
endif;
* change notation
#call gBT7(1,1);
#endprocedure

#procedure sBT7
* discard vanishing sub-topologies
#call zBT7
.sort
* apply symmetries
#call yBT7
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] BT7 :



*--#[ BT8 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:10.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), v1 + v2,  6 -- 5
*   2: d1 (gl), -v1,      2 -- 1
*   3: d2 (gl), -p1 + v1, 5 -- 1
*   4: d3 (gl), -p2 - v1, 6 -- 2
*   5: d4 (gl), -v2,      4 -- 3
*   6: d6 (gl), p2 - v2,  6 -- 4
*   7: d5 (gl), p1 + v2,  5 -- 3

#include fsymm.prc
#ifndef `symBT8'
#define symBT8 "0"
#endif

#define top "BT8"
#define pBT8 "p1,p2"
#define kBT8 "v1,v2"
#define dBT8 "d1,d2,d3,d4,d5,d6,d7"
#define vBT8 "x"

#procedure fBT8(MM,M2ep)
* write as factors
id BT8(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT8*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d1^(-a2)*d2^(-a3)*d3^(-a4)*d4^(-a5)*d6^(-a6)*d5^(-a7);
#endprocedure

#procedure gBT8(MM,M2ep)
* write as function
id BT8*d7^a1?*d1^a2?*d2^a3?*d3^a4?*d4^a5?*d6^a6?*d5^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT8(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT8(MM)
* expansion of factors
if (match(BT8)) 
  id d7 = (`MM')*x + v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(BT8)) 
  id d1 = v1.v1;
.sort
if (match(BT8)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(BT8)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(BT8)) 
  id d4 = v2.v2;
.sort
if (match(BT8)) 
  id d6 = -2*p2.v2 + v2.v2;
.sort
if (match(BT8)) 
  id d5 = 2*p1.v2 + v2.v2;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT8(MM)
* reduction of scalar products
if (match(BT8)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT8)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(BT8)) 
  id v1.v1 = d1;
.sort
if (match(BT8)) 
  id p1.v2 = (-d4 + d5)/2;
.sort
if (match(BT8)) 
  id p2.v2 = (d4 - d6)/2;
.sort
if (match(BT8)) 
  id v1.v2 = (-d1 - d4 + d7 - (`MM')*x)/2;
.sort
if (match(BT8)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT8
* vanishing sub-topologies
id BT8(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id BT8(a1?,a2?,a3?neg0_,a4?neg0_,a5?,a6?,a7?) = 0;
id BT8(a1?,a2?,a3?neg0_,a4?,a5?,a6?,a7?neg0_) = 0;
id BT8(a1?,a2?,a3?,a4?neg0_,a5?,a6?neg0_,a7?) = 0;
id BT8(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?neg0_) = 0;
#endprocedure

#procedure yBT8
#redefine top "BT8"
* change notation
#call fBT8(1,1);
* symmetries
if (match(BT8));
repeat;

#if (`symBT8' <= 7)
#call fsymm(d7\\\,d1\\\,d2\\\,d3\\\,d4\\\,d6\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d2\\\,d4\\\,d5\\\,d6\,\
            d7\\\,d4\\\,d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d1\\\,d3\\\,d2)
#endif

#if (`symBT8' <= 6)
#call fsymm(d1\\\,d2\\\,d3\\\,d4\\\,d6\\\,d5\,\
            d1\\\,d2\\\,d3\\\,d4\\\,d5\\\,d6\,\
            d1\\\,d3\\\,d2\\\,d4\\\,d6\\\,d5\,\
            d1\\\,d3\\\,d2\\\,d4\\\,d5\\\,d6\,\
            d4\\\,d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d4\\\,d6\\\,d5\\\,d1\\\,d3\\\,d2\,\
            d4\\\,d5\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d4\\\,d5\\\,d6\\\,d1\\\,d3\\\,d2)
#endif

#if (`symBT8' <= 5)
#call fsymm(d7\\\,d1\\\,d2\\\,d4\\\,d5\,\
            d7\\\,d1\\\,d2\\\,d5\\\,d4\,\
            d7\\\,d1\\\,d3\\\,d4\\\,d6\,\
            d7\\\,d1\\\,d3\\\,d6\\\,d4\,\
            d7\\\,d2\\\,d1\\\,d4\\\,d5\,\
            d7\\\,d2\\\,d1\\\,d5\\\,d4\,\
            d7\\\,d3\\\,d1\\\,d4\\\,d6\,\
            d7\\\,d3\\\,d1\\\,d6\\\,d4\,\
            d7\\\,d4\\\,d6\\\,d1\\\,d3\,\
            d7\\\,d4\\\,d6\\\,d3\\\,d1\,\
            d7\\\,d4\\\,d5\\\,d1\\\,d2\,\
            d7\\\,d4\\\,d5\\\,d2\\\,d1\,\
            d7\\\,d6\\\,d4\\\,d1\\\,d3\,\
            d7\\\,d6\\\,d4\\\,d3\\\,d1\,\
            d7\\\,d5\\\,d4\\\,d1\\\,d2\,\
            d7\\\,d5\\\,d4\\\,d2\\\,d1)
#endif

endrepeat;
endif;
* change notation
#call gBT8(1,1);
#endprocedure

#procedure sBT8
* discard vanishing sub-topologies
#call zBT8
.sort
* apply symmetries
#call yBT8
.sort
#endprocedure

*--#] BT8 :



*--#[ BT9 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-09 18:06:11.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gl), v1 + v2,  6 -- 5
*   2: d6 (hb), p2 - v2,  6 -- 4
*   3: d4 (gl), -v2,      4 -- 3
*   4: d5 (gl), p1 + v2,  5 -- 3
*   5: d3 (gl), -p2 - v1, 6 -- 2
*   6: d1 (gl), -v1,      2 -- 1
*   7: d2 (gl), -p1 + v1, 5 -- 1

#include fsymm.prc
#ifndef `symBT9'
#define symBT9 "0"
#endif

#define top "BT9"
#define pBT9 "p1,p2"
#define kBT9 "v1,v2"
#define dBT9 "d1,d2,d3,d4,d5,d6,d7"
#define vBT9 "x"

#procedure fBT9(MM,M2ep)
* write as factors
id BT9(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = BT9*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d4^(-a3)*d5^(-a4)*d3^(-a5)*d1^(-a6)*d2^(-a7);
#endprocedure

#procedure gBT9(MM,M2ep)
* write as function
id BT9*d7^a1?*d6^a2?*d4^a3?*d5^a4?*d3^a5?*d1^a6?*d2^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *BT9(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eBT9(MM)
* expansion of factors
if (match(BT9)) 
  id d7 = v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(BT9)) 
  id d6 = (`MM')*x - 2*p2.v2 + v2.v2;
.sort
if (match(BT9)) 
  id d4 = v2.v2;
.sort
if (match(BT9)) 
  id d5 = 2*p1.v2 + v2.v2;
.sort
if (match(BT9)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(BT9)) 
  id d1 = v1.v1;
.sort
if (match(BT9)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cBT9(MM)
* reduction of scalar products
if (match(BT9)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(BT9)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(BT9)) 
  id v1.v1 = d1;
.sort
if (match(BT9)) 
  id p1.v2 = (-d4 + d5)/2;
.sort
if (match(BT9)) 
  id p2.v2 = (d4 - d6 + (`MM')*x)/2;
.sort
if (match(BT9)) 
  id v1.v2 = (-d1 - d4 + d7)/2;
.sort
if (match(BT9)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zBT9
* vanishing sub-topologies
id BT9(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id BT9(a1?neg0_,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id BT9(a1?neg0_,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
id BT9(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
id BT9(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
id BT9(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?neg0_) = 0;
#endprocedure

#procedure yBT9
#redefine top "BT9"
* change notation
#call fBT9(1,1);
* symmetries
if (match(BT9));
repeat;

#if (`symBT9' <= 6)
#call fsymm(d6\\\,d4\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d2\\\,d1\\\,d3)
#endif

#if (`symBT9' <= 5)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d3\,\
            d3\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d1\,\
            d1\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d2\,\
            d2\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d3\\\,d1\,\
            d7\\\,d6\\\,d4\\\,d1\\\,d3)
#call fsymm(d7\\\,d4\\\,d5\\\,d3\\\,d1\,\
            d7\\\,d1\\\,d3\\\,d5\\\,d4)
#call fsymm(d7\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d5\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d7\\\,d4\\\,d2\\\,d1\\\,d3\,\
            d4\\\,d7\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d2\\\,d1\\\,d3)
#endif

#if (`symBT9' <= 4)
#call fsymm(d7\\\,d6\\\,d4\\\,d3\,\
            d7\\\,d6\\\,d4\\\,d1\,\
            d3\\\,d6\\\,d4\\\,d7\,\
            d1\\\,d6\\\,d4\\\,d7)
#call fsymm(d7\\\,d4\\\,d5\\\,d3\,\
            d7\\\,d1\\\,d3\\\,d5\,\
            d5\\\,d1\\\,d3\\\,d7\,\
            d3\\\,d4\\\,d5\\\,d7)
#endif

#if (`symBT9' <= 3)
#call fsymm(d7\\\,d5\\\,d3\,\
            d7\\\,d3\\\,d5\,\
            d5\\\,d7\\\,d3\,\
            d5\\\,d3\\\,d7\,\
            d3\\\,d7\\\,d5\,\
            d3\\\,d5\\\,d7)
#endif

endrepeat;
endif;
* change notation
#call gBT9(1,1);
#endprocedure

#procedure sBT9
* discard vanishing sub-topologies
#call zBT9
.sort
* apply symmetries
#call yBT9
.sort
#endprocedure

*--#] BT9 :

