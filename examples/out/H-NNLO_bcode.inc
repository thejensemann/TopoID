*--#[ NNLOrBT1 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:40.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gh), p1 + p2 - v1 - v2, 5 -- 6
*   2: d4 (hb), -v2,               4 -- 3
*   3: d6 (gl), p1 - v2,           6 -- 4
*   4: d5 (gl), -p2 + v2,          5 -- 3
*   5: d3 (gh), p2 - v1,           6 -- 2
*   6: d2 (gh), p1 - v1,           1 -- 5
*   7: d1 (gh), -v1,               2 -- 1

#include fsymm.prc
#ifndef `symNNLOrBT1'
#define symNNLOrBT1 "0"
#endif

#define top "NNLOrBT1"
#define pNNLOrBT1 "p1,p2"
#define kNNLOrBT1 "v1,v2"
#define dNNLOrBT1 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT1 "x,[1-x]"

#procedure fNNLOrBT1(MM,M2ep)
* write as factors
id NNLOrBT1(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT1*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d4^(-a2)*d6^(-a3)*d5^(-a4)*d3^(-a5)*d2^(-a6)*d1^(-a7);
#endprocedure

#procedure gNNLOrBT1(MM,M2ep)
* write as function
id NNLOrBT1*d7^a1?*d4^a2?*d6^a3?*d5^a4?*d3^a5?*d2^a6?*d1^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT1(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT1(MM)
* expansion of factors
if (match(NNLOrBT1)) 
  id d7 = -(`MM') - 2*p1.v1 - 2*p1.v2 - 2*p2.v1 - 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT1)) 
  id d4 = (`MM')*x + v2.v2;
.sort
if (match(NNLOrBT1)) 
  id d6 = -2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT1)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT1)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT1)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT1)) 
  id d1 = v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT1(MM)
* reduction of scalar products
if (match(NNLOrBT1)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT1)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(NNLOrBT1)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT1)) 
  id p1.v2 = (d4 - d6 - (`MM')*x)/2;
.sort
if (match(NNLOrBT1)) 
  id p2.v2 = (d4 - d5 - (`MM')*x)/2;
.sort
if (match(NNLOrBT1)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 + (`MM')*[1-x])/2;
.sort
if (match(NNLOrBT1)) 
  id v2.v2 = d4 - (`MM')*x;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT1
* vanishing sub-topologies
id NNLOrBT1(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT1(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT1(a1?,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
#endprocedure

#procedure yNNLOrBT1
#redefine top "NNLOrBT1"
* change notation
#call fNNLOrBT1(1,1);
* symmetries
if (match(NNLOrBT1));
repeat;

#if (`symNNLOrBT1' <= 7)
#call fsymm(d7\\\,d4\\\,d6\\\,d5\\\,d3\\\,d2\\\,d1\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d2\\\,d3\\\,d1)
#endif

#if (`symNNLOrBT1' <= 5)
#call fsymm(d7\\\,d4\\\,d6\\\,d5\\\,d1\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d1\,\
            d1\\\,d4\\\,d6\\\,d5\\\,d7\,\
            d1\\\,d4\\\,d5\\\,d6\\\,d7)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT1(1,1);
#endprocedure

#procedure sNNLOrBT1
* discard vanishing sub-topologies
#call zNNLOrBT1
.sort
* apply symmetries
#call yNNLOrBT1
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] NNLOrBT1 :



*--#[ NNLOrBT10 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:41.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), -p1 + p2 + v1 + v2, 6 -- 5
*   2: d2 (gl), -p1 + v1,           5 -- 1
*   3: d3 (gl), -p2 - v1,           6 -- 2
*   4: d1 (gl), -v1,                2 -- 1
*   5: d6 (gl), p1 - v2,            6 -- 4
*   6: d5 (gl), p2 + v2,            5 -- 3
*   7: d4 (gl), -v2,                4 -- 3

#include fsymm.prc
#ifndef `symNNLOrBT10'
#define symNNLOrBT10 "0"
#endif

#define top "NNLOrBT10"
#define pNNLOrBT10 "p1,p2"
#define kNNLOrBT10 "v1,v2"
#define dNNLOrBT10 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT10 "x,[1+x]"

#procedure fNNLOrBT10(MM,M2ep)
* write as factors
id NNLOrBT10(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT10*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d2^(-a2)*d3^(-a3)*d1^(-a4)*d6^(-a5)*d5^(-a6)*d4^(-a7);
#endprocedure

#procedure gNNLOrBT10(MM,M2ep)
* write as function
id NNLOrBT10*d7^a1?*d2^a2?*d3^a3?*d1^a4?*d6^a5?*d5^a6?*d4^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT10(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT10(MM)
* expansion of factors
if (match(NNLOrBT10)) 
  id d7 = -2*p1.v1 - 2*p1.v2 + 2*p2.v1 + 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2 + (`MM')*[1+x];
.sort
if (match(NNLOrBT10)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT10)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT10)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT10)) 
  id d6 = -2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT10)) 
  id d5 = 2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT10)) 
  id d4 = v2.v2;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT10(MM)
* reduction of scalar products
if (match(NNLOrBT10)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT10)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(NNLOrBT10)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT10)) 
  id p1.v2 = (d4 - d6)/2;
.sort
if (match(NNLOrBT10)) 
  id p2.v2 = (-d4 + d5)/2;
.sort
if (match(NNLOrBT10)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 - (`MM')*[1+x])/2;
.sort
if (match(NNLOrBT10)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT10
* vanishing sub-topologies
id NNLOrBT10(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT10(a1?,a2?neg0_,a3?neg0_,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT10(a1?,a2?neg0_,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
id NNLOrBT10(a1?,a2?,a3?neg0_,a4?,a5?neg0_,a6?,a7?) = 0;
id NNLOrBT10(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?) = 0;
#endprocedure

#procedure yNNLOrBT10
#redefine top "NNLOrBT10"
* change notation
#call fNNLOrBT10(1,1);
* symmetries
if (match(NNLOrBT10));
repeat;

#if (`symNNLOrBT10' <= 7)
#call fsymm(d7\\\,d2\\\,d3\\\,d1\\\,d6\\\,d5\\\,d4\,\
            d7\\\,d3\\\,d2\\\,d1\\\,d5\\\,d6\\\,d4\,\
            d7\\\,d6\\\,d5\\\,d4\\\,d2\\\,d3\\\,d1\,\
            d7\\\,d5\\\,d6\\\,d4\\\,d3\\\,d2\\\,d1)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT10(1,1);
#endprocedure

#procedure sNNLOrBT10
* discard vanishing sub-topologies
#call zNNLOrBT10
.sort
* apply symmetries
#call yNNLOrBT10
.sort
* substitute variables
mu replace_([1+x],1 + x);
.sort
#endprocedure

*--#] NNLOrBT10 :



*--#[ NNLOrBT11 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:41.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gl), -p1 + p2 + v1 + v2, 6 -- 5
*   2: d6 (hb), p1 - v2,            6 -- 4
*   3: d4 (gl), -v2,                4 -- 3
*   4: d5 (gl), p2 + v2,            5 -- 3
*   5: d3 (gl), -p2 - v1,           6 -- 2
*   6: d1 (gl), -v1,                2 -- 1
*   7: d2 (gl), -p1 + v1,           5 -- 1

#include fsymm.prc
#ifndef `symNNLOrBT11'
#define symNNLOrBT11 "0"
#endif

#define top "NNLOrBT11"
#define pNNLOrBT11 "p1,p2"
#define kNNLOrBT11 "v1,v2"
#define dNNLOrBT11 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT11 "x,[1-x]"

#procedure fNNLOrBT11(MM,M2ep)
* write as factors
id NNLOrBT11(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT11*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d4^(-a3)*d5^(-a4)*d3^(-a5)*d1^(-a6)*d2^(-a7);
#endprocedure

#procedure gNNLOrBT11(MM,M2ep)
* write as function
id NNLOrBT11*d7^a1?*d6^a2?*d4^a3?*d5^a4?*d3^a5?*d1^a6?*d2^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT11(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT11(MM)
* expansion of factors
if (match(NNLOrBT11)) 
  id d7 = (`MM') - 2*p1.v1 - 2*p1.v2 + 2*p2.v1 + 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT11)) 
  id d6 = (`MM')*x - 2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT11)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT11)) 
  id d5 = 2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT11)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT11)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT11)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT11(MM)
* reduction of scalar products
if (match(NNLOrBT11)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT11)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(NNLOrBT11)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT11)) 
  id p1.v2 = (d4 - d6 + (`MM')*x)/2;
.sort
if (match(NNLOrBT11)) 
  id p2.v2 = (-d4 + d5)/2;
.sort
if (match(NNLOrBT11)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 - (`MM')*[1-x])/2;
.sort
if (match(NNLOrBT11)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT11
* vanishing sub-topologies
id NNLOrBT11(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT11(a1?neg0_,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id NNLOrBT11(a1?neg0_,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
id NNLOrBT11(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
id NNLOrBT11(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
id NNLOrBT11(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?neg0_) = 0;
#endprocedure

#procedure yNNLOrBT11
#redefine top "NNLOrBT11"
* change notation
#call fNNLOrBT11(1,1);
* symmetries
if (match(NNLOrBT11));
repeat;

#if (`symNNLOrBT11' <= 6)
#call fsymm(d6\\\,d4\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d2\\\,d1\\\,d3)
#endif

#if (`symNNLOrBT11' <= 5)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d3\,\
            d3\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d1\,\
            d1\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d2\,\
            d2\\\,d6\\\,d4\\\,d5\\\,d7)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT11(1,1);
#endprocedure

#procedure sNNLOrBT11
* discard vanishing sub-topologies
#call zNNLOrBT11
.sort
* apply symmetries
#call yNNLOrBT11
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] NNLOrBT11 :



*--#[ NNLOrBT2 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:42.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), -p1 - p2 + v1 + v2, 6 -- 5
*   2: d1 (gl), -v1,                2 -- 1
*   3: d2 (gl), -p1 + v1,           5 -- 1
*   4: d3 (gl), p2 - v1,            6 -- 2
*   5: d4 (gl), -v2,                4 -- 3
*   6: d6 (gl), p1 - v2,            6 -- 4
*   7: d5 (gl), -p2 + v2,           5 -- 3

#include fsymm.prc
#ifndef `symNNLOrBT2'
#define symNNLOrBT2 "0"
#endif

#define top "NNLOrBT2"
#define pNNLOrBT2 "p1,p2"
#define kNNLOrBT2 "v1,v2"
#define dNNLOrBT2 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT2 "x,[1-x]"

#procedure fNNLOrBT2(MM,M2ep)
* write as factors
id NNLOrBT2(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT2*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d1^(-a2)*d2^(-a3)*d3^(-a4)*d4^(-a5)*d6^(-a6)*d5^(-a7);
#endprocedure

#procedure gNNLOrBT2(MM,M2ep)
* write as function
id NNLOrBT2*d7^a1?*d1^a2?*d2^a3?*d3^a4?*d4^a5?*d6^a6?*d5^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT2(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT2(MM)
* expansion of factors
if (match(NNLOrBT2)) 
  id d7 = -2*p1.v1 - 2*p1.v2 - 2*p2.v1 - 2*p2.v2 + v1.v1 + 2*v1.v2 + v2.v2 - (`MM')*[1-x];
.sort
if (match(NNLOrBT2)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT2)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT2)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT2)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT2)) 
  id d6 = -2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT2)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT2(MM)
* reduction of scalar products
if (match(NNLOrBT2)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT2)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(NNLOrBT2)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT2)) 
  id p1.v2 = (d4 - d6)/2;
.sort
if (match(NNLOrBT2)) 
  id p2.v2 = (d4 - d5)/2;
.sort
if (match(NNLOrBT2)) 
  id v1.v2 = (d1 - d2 - d3 + d4 - d5 - d6 + d7 + (`MM')*[1-x])/2;
.sort
if (match(NNLOrBT2)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT2
* vanishing sub-topologies
id NNLOrBT2(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT2(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT2(a1?,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
#endprocedure

#procedure yNNLOrBT2
#redefine top "NNLOrBT2"
* change notation
#call fNNLOrBT2(1,1);
* symmetries
if (match(NNLOrBT2));
repeat;

#if (`symNNLOrBT2' <= 7)
#call fsymm(d7\\\,d1\\\,d2\\\,d3\\\,d4\\\,d6\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d2\\\,d4\\\,d5\\\,d6\,\
            d7\\\,d4\\\,d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d1\\\,d3\\\,d2)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT2(1,1);
#endprocedure

#procedure sNNLOrBT2
* discard vanishing sub-topologies
#call zNNLOrBT2
.sort
* apply symmetries
#call yNNLOrBT2
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] NNLOrBT2 :



*--#[ NNLOrBT3 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:43.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d6 (hb), p1 - v1 + v2, 5 -- 4
*   2: d7 (gl), v1 - v2,      6 -- 4
*   3: d5 (gl), -p2 + v2,     6 -- 3
*   4: d4 (gl), -v2,          5 -- 3
*   5: d2 (gl), -p1 + v1,     5 -- 1
*   6: d1 (gl), -v1,          2 -- 1
*   7: d3 (gl), p2 - v1,      6 -- 2

#include fsymm.prc
#ifndef `symNNLOrBT3'
#define symNNLOrBT3 "0"
#endif

#define top "NNLOrBT3"
#define pNNLOrBT3 "p1,p2"
#define kNNLOrBT3 "v1,v2"
#define dNNLOrBT3 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT3 "x"

#procedure fNNLOrBT3(MM,M2ep)
* write as factors
id NNLOrBT3(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT3*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d6^(-a1)*d7^(-a2)*d5^(-a3)*d4^(-a4)*d2^(-a5)*d1^(-a6)*d3^(-a7);
#endprocedure

#procedure gNNLOrBT3(MM,M2ep)
* write as function
id NNLOrBT3*d6^a1?*d7^a2?*d5^a3?*d4^a4?*d2^a5?*d1^a6?*d3^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT3(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT3(MM)
* expansion of factors
if (match(NNLOrBT3)) 
  id d6 = (`MM')*x - 2*p1.v1 + 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT3)) 
  id d7 = v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT3)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT3)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT3)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT3)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT3)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT3(MM)
* reduction of scalar products
if (match(NNLOrBT3)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT3)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(NNLOrBT3)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT3)) 
  id p1.v2 = (d1 - d2 + d6 - d7 - (`MM')*x)/2;
.sort
if (match(NNLOrBT3)) 
  id p2.v2 = (d4 - d5)/2;
.sort
if (match(NNLOrBT3)) 
  id v1.v2 = (d1 + d4 - d7)/2;
.sort
if (match(NNLOrBT3)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT3
* vanishing sub-topologies
id NNLOrBT3(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT3(a1?,a2?,a3?neg0_,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT3(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
#endprocedure

#procedure yNNLOrBT3
#redefine top "NNLOrBT3"
* change notation
#call fNNLOrBT3(1,1);
* symmetries
if (match(NNLOrBT3));
repeat;

#if (`symNNLOrBT3' <= 6)
#call fsymm(d6\\\,d7\\\,d5\\\,d4\\\,d1\\\,d3\,\
            d6\\\,d7\\\,d1\\\,d3\\\,d5\\\,d4)
#endif

#if (`symNNLOrBT3' <= 5)
#call fsymm(d6\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d6\\\,d1\\\,d2\\\,d4\\\,d5)
#call fsymm(d6\\\,d5\\\,d2\\\,d1\\\,d3\,\
            d6\\\,d5\\\,d3\\\,d1\\\,d2)
#endif

#if (`symNNLOrBT3' <= 4)
#call fsymm(d6\\\,d5\\\,d4\\\,d1\,\
            d6\\\,d1\\\,d2\\\,d5\,\
            d6\\\,d1\\\,d3\\\,d5)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT3(1,1);
#endprocedure

#procedure sNNLOrBT3
* discard vanishing sub-topologies
#call zNNLOrBT3
.sort
* apply symmetries
#call yNNLOrBT3
.sort
#endprocedure

*--#] NNLOrBT3 :



*--#[ NNLOrBT4 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:43.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d4 (gh), -v2,           5 -- 3
*   2: d5 (gh), p2 - v2,       3 -- 6
*   3: d7 (gh), v1 - v2,       6 -- 4
*   4: d6 (gh), -p1 + v1 - v2, 4 -- 5
*   5: d1 (hb), -v1,           2 -- 1
*   6: d2 (gl), -p1 + v1,      5 -- 1
*   7: d3 (gl), p2 - v1,       6 -- 2

#include fsymm.prc
#ifndef `symNNLOrBT4'
#define symNNLOrBT4 "0"
#endif

#define top "NNLOrBT4"
#define pNNLOrBT4 "p1,p2"
#define kNNLOrBT4 "v1,v2"
#define dNNLOrBT4 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT4 "x"

#procedure fNNLOrBT4(MM,M2ep)
* write as factors
id NNLOrBT4(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT4*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d4^(-a1)*d5^(-a2)*d7^(-a3)*d6^(-a4)*d1^(-a5)*d2^(-a6)*d3^(-a7);
#endprocedure

#procedure gNNLOrBT4(MM,M2ep)
* write as function
id NNLOrBT4*d4^a1?*d5^a2?*d7^a3?*d6^a4?*d1^a5?*d2^a6?*d3^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT4(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT4(MM)
* expansion of factors
if (match(NNLOrBT4)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT4)) 
  id d5 = -2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT4)) 
  id d7 = v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT4)) 
  id d6 = -2*p1.v1 + 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT4)) 
  id d1 = (`MM')*x + v1.v1;
.sort
if (match(NNLOrBT4)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT4)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT4(MM)
* reduction of scalar products
if (match(NNLOrBT4)) 
  id p1.v1 = (d1 - d2 - (`MM')*x)/2;
.sort
if (match(NNLOrBT4)) 
  id p2.v1 = (d1 - d3 - (`MM')*x)/2;
.sort
if (match(NNLOrBT4)) 
  id v1.v1 = d1 - (`MM')*x;
.sort
if (match(NNLOrBT4)) 
  id p1.v2 = (d1 - d2 + d6 - d7 - (`MM')*x)/2;
.sort
if (match(NNLOrBT4)) 
  id p2.v2 = (d4 - d5)/2;
.sort
if (match(NNLOrBT4)) 
  id v1.v2 = (d1 + d4 - d7 - (`MM')*x)/2;
.sort
if (match(NNLOrBT4)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT4
* vanishing sub-topologies
id NNLOrBT4(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT4(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id NNLOrBT4(a1?,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
#endprocedure

#procedure yNNLOrBT4
#redefine top "NNLOrBT4"
* change notation
#call fNNLOrBT4(1,1);
* symmetries
if (match(NNLOrBT4));
repeat;

#if (`symNNLOrBT4' <= 7)
#call fsymm(d4\\\,d5\\\,d7\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d6\\\,d4\\\,d5\\\,d1\\\,d3\\\,d2)
#endif

#if (`symNNLOrBT4' <= 5)
#call fsymm(d5\\\,d6\\\,d1\\\,d2\\\,d3\,\
            d5\\\,d6\\\,d1\\\,d3\\\,d2\,\
            d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d6\\\,d5\\\,d1\\\,d3\\\,d2)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT4(1,1);
#endprocedure

#procedure sNNLOrBT4
* discard vanishing sub-topologies
#call zNNLOrBT4
.sort
* apply symmetries
#call yNNLOrBT4
.sort
#endprocedure

*--#] NNLOrBT4 :



*--#[ NNLOrBT5 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:44.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), p1 - p2 + v1 - v2, 6 -- 4
*   2: d6 (gl), -p1 - v1 + v2,     5 -- 4
*   3: d5 (gl), -p1 + v2,          6 -- 3
*   4: d4 (gl), -v2,               5 -- 3
*   5: d3 (gl), p2 - v1,           6 -- 2
*   6: d2 (gl), p1 + v1,           5 -- 1
*   7: d1 (gl), -v1,               2 -- 1

#include fsymm.prc
#ifndef `symNNLOrBT5'
#define symNNLOrBT5 "0"
#endif

#define top "NNLOrBT5"
#define pNNLOrBT5 "p1,p2"
#define kNNLOrBT5 "v1,v2"
#define dNNLOrBT5 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT5 "x,[1+x]"

#procedure fNNLOrBT5(MM,M2ep)
* write as factors
id NNLOrBT5(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT5*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d5^(-a3)*d4^(-a4)*d3^(-a5)*d2^(-a6)*d1^(-a7);
#endprocedure

#procedure gNNLOrBT5(MM,M2ep)
* write as function
id NNLOrBT5*d7^a1?*d6^a2?*d5^a3?*d4^a4?*d3^a5?*d2^a6?*d1^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT5(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT5(MM)
* expansion of factors
if (match(NNLOrBT5)) 
  id d7 = 2*p1.v1 - 2*p1.v2 - 2*p2.v1 + 2*p2.v2 + v1.v1 - 2*v1.v2 + v2.v2 + (`MM')*[1+x];
.sort
if (match(NNLOrBT5)) 
  id d6 = 2*p1.v1 - 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT5)) 
  id d5 = -2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT5)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT5)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT5)) 
  id d2 = 2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT5)) 
  id d1 = v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT5(MM)
* reduction of scalar products
if (match(NNLOrBT5)) 
  id p1.v1 = (-d1 + d2)/2;
.sort
if (match(NNLOrBT5)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(NNLOrBT5)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT5)) 
  id p1.v2 = (d4 - d5)/2;
.sort
if (match(NNLOrBT5)) 
  id p2.v2 = (d1 - d3 - d6 + d7 - (`MM')*[1+x])/2;
.sort
if (match(NNLOrBT5)) 
  id v1.v2 = (d2 + d5 - d6)/2;
.sort
if (match(NNLOrBT5)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT5
* vanishing sub-topologies
id NNLOrBT5(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT5(a1?,a2?,a3?neg0_,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT5(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
#endprocedure

#procedure yNNLOrBT5
#redefine top "NNLOrBT5"
* change notation
#call fNNLOrBT5(1,1);
* symmetries
if (match(NNLOrBT5));
repeat;

#if (`symNNLOrBT5' <= 6)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d2\\\,d1\,\
            d7\\\,d6\\\,d2\\\,d1\\\,d5\\\,d4)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT5(1,1);
#endprocedure

#procedure sNNLOrBT5
* discard vanishing sub-topologies
#call zNNLOrBT5
.sort
* apply symmetries
#call yNNLOrBT5
.sort
* substitute variables
mu replace_([1+x],1 + x);
.sort
#endprocedure

*--#] NNLOrBT5 :



*--#[ NNLOrBT6 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:45.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d6 (hb), -p1 - v1 + v2,     5 -- 4
*   2: d7 (gl), p1 - p2 + v1 - v2, 6 -- 4
*   3: d5 (gl), -p1 + v2,          6 -- 3
*   4: d4 (gl), -v2,               5 -- 3
*   5: d2 (gl), p1 + v1,           5 -- 1
*   6: d1 (gl), -v1,               2 -- 1
*   7: d3 (gl), p2 - v1,           6 -- 2

#include fsymm.prc
#ifndef `symNNLOrBT6'
#define symNNLOrBT6 "0"
#endif

#define top "NNLOrBT6"
#define pNNLOrBT6 "p1,p2"
#define kNNLOrBT6 "v1,v2"
#define dNNLOrBT6 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT6 "x,[1-x]"

#procedure fNNLOrBT6(MM,M2ep)
* write as factors
id NNLOrBT6(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT6*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d6^(-a1)*d7^(-a2)*d5^(-a3)*d4^(-a4)*d2^(-a5)*d1^(-a6)*d3^(-a7);
#endprocedure

#procedure gNNLOrBT6(MM,M2ep)
* write as function
id NNLOrBT6*d6^a1?*d7^a2?*d5^a3?*d4^a4?*d2^a5?*d1^a6?*d3^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT6(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT6(MM)
* expansion of factors
if (match(NNLOrBT6)) 
  id d6 = (`MM')*x + 2*p1.v1 - 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT6)) 
  id d7 = (`MM') + 2*p1.v1 - 2*p1.v2 - 2*p2.v1 + 2*p2.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT6)) 
  id d5 = -2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT6)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT6)) 
  id d2 = 2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT6)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT6)) 
  id d3 = -2*p2.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT6(MM)
* reduction of scalar products
if (match(NNLOrBT6)) 
  id p1.v1 = (-d1 + d2)/2;
.sort
if (match(NNLOrBT6)) 
  id p2.v1 = (d1 - d3)/2;
.sort
if (match(NNLOrBT6)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT6)) 
  id p1.v2 = (d4 - d5)/2;
.sort
if (match(NNLOrBT6)) 
  id p2.v2 = (d1 - d3 - d6 + d7 - (`MM')*[1-x])/2;
.sort
if (match(NNLOrBT6)) 
  id v1.v2 = (d2 + d5 - d6 + (`MM')*x)/2;
.sort
if (match(NNLOrBT6)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT6
* vanishing sub-topologies
id NNLOrBT6(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT6(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id NNLOrBT6(a1?,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
#endprocedure

#procedure yNNLOrBT6
#redefine top "NNLOrBT6"
* change notation
#call fNNLOrBT6(1,1);
* symmetries
if (match(NNLOrBT6));
repeat;

#if (`symNNLOrBT6' <= 5)
#call fsymm(d6\\\,d5\\\,d4\\\,d1\\\,d3\,\
            d6\\\,d1\\\,d3\\\,d5\\\,d4)
#endif

#if (`symNNLOrBT6' <= 4)
#call fsymm(d6\\\,d7\\\,d4\\\,d3\,\
            d6\\\,d7\\\,d3\\\,d4)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT6(1,1);
#endprocedure

#procedure sNNLOrBT6
* discard vanishing sub-topologies
#call zNNLOrBT6
.sort
* apply symmetries
#call yNNLOrBT6
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] NNLOrBT6 :



*--#[ NNLOrBT7 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:45.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gl), p1 - p2 + v1 - v2, 6 -- 4
*   2: d6 (gl), -p1 - v1 + v2,     5 -- 4
*   3: d5 (gl), -p1 + v2,          6 -- 3
*   4: d4 (gl), -v2,               5 -- 3
*   5: d3 (hb), p2 - v1,           6 -- 2
*   6: d1 (gl), -v1,               2 -- 1
*   7: d2 (gl), p1 + v1,           5 -- 1

#include fsymm.prc
#ifndef `symNNLOrBT7'
#define symNNLOrBT7 "0"
#endif

#define top "NNLOrBT7"
#define pNNLOrBT7 "p1,p2"
#define kNNLOrBT7 "v1,v2"
#define dNNLOrBT7 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT7 "x,[1-x]"

#procedure fNNLOrBT7(MM,M2ep)
* write as factors
id NNLOrBT7(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT7*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d5^(-a3)*d4^(-a4)*d3^(-a5)*d1^(-a6)*d2^(-a7);
#endprocedure

#procedure gNNLOrBT7(MM,M2ep)
* write as function
id NNLOrBT7*d7^a1?*d6^a2?*d5^a3?*d4^a4?*d3^a5?*d1^a6?*d2^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT7(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT7(MM)
* expansion of factors
if (match(NNLOrBT7)) 
  id d7 = (`MM') + 2*p1.v1 - 2*p1.v2 - 2*p2.v1 + 2*p2.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT7)) 
  id d6 = 2*p1.v1 - 2*p1.v2 + v1.v1 - 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT7)) 
  id d5 = -2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT7)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT7)) 
  id d3 = (`MM')*x - 2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT7)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT7)) 
  id d2 = 2*p1.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT7(MM)
* reduction of scalar products
if (match(NNLOrBT7)) 
  id p1.v1 = (-d1 + d2)/2;
.sort
if (match(NNLOrBT7)) 
  id p2.v1 = (d1 - d3 + (`MM')*x)/2;
.sort
if (match(NNLOrBT7)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT7)) 
  id p1.v2 = (d4 - d5)/2;
.sort
if (match(NNLOrBT7)) 
  id p2.v2 = (d1 - d3 - d6 + d7 - (`MM')*[1-x])/2;
.sort
if (match(NNLOrBT7)) 
  id v1.v2 = (d2 + d5 - d6)/2;
.sort
if (match(NNLOrBT7)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT7
* vanishing sub-topologies
id NNLOrBT7(a1?,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
id NNLOrBT7(a1?neg0_,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT7(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
id NNLOrBT7(a1?,a2?,a3?neg0_,a4?neg0_,a5?,a6?,a7?) = 0;
id NNLOrBT7(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
#endprocedure

#procedure yNNLOrBT7
#redefine top "NNLOrBT7"
* change notation
#call fNNLOrBT7(1,1);
* symmetries
if (match(NNLOrBT7));
repeat;

#if (`symNNLOrBT7' <= 6)
#call fsymm(d7\\\,d6\\\,d5\\\,d4\\\,d3\\\,d2\,\
            d5\\\,d4\\\,d7\\\,d6\\\,d3\\\,d2)
#endif

#if (`symNNLOrBT7' <= 5)
#call fsymm(d7\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d5\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d7\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d7\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d5\\\,d6\\\,d3\\\,d1\\\,d2)
#call fsymm(d6\\\,d4\\\,d3\\\,d1\\\,d2\,\
            d4\\\,d6\\\,d3\\\,d1\\\,d2)
#endif

#if (`symNNLOrBT7' <= 4)
#call fsymm(d7\\\,d4\\\,d3\\\,d2\,\
            d6\\\,d5\\\,d3\\\,d2\,\
            d5\\\,d6\\\,d3\\\,d2\,\
            d4\\\,d7\\\,d3\\\,d2)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT7(1,1);
#endprocedure

#procedure sNNLOrBT7
* discard vanishing sub-topologies
#call zNNLOrBT7
.sort
* apply symmetries
#call yNNLOrBT7
.sort
* substitute variables
mu replace_([1-x],1 - x);
.sort
#endprocedure

*--#] NNLOrBT7 :



*--#[ NNLOrBT8 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:46.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (hb), v1 + v2,  6 -- 5
*   2: d1 (gl), -v1,      2 -- 1
*   3: d2 (gl), -p1 + v1, 5 -- 1
*   4: d3 (gl), -p2 - v1, 6 -- 2
*   5: d4 (gl), -v2,      4 -- 3
*   6: d6 (gl), p2 - v2,  6 -- 4
*   7: d5 (gl), p1 + v2,  5 -- 3

#include fsymm.prc
#ifndef `symNNLOrBT8'
#define symNNLOrBT8 "0"
#endif

#define top "NNLOrBT8"
#define pNNLOrBT8 "p1,p2"
#define kNNLOrBT8 "v1,v2"
#define dNNLOrBT8 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT8 "x"

#procedure fNNLOrBT8(MM,M2ep)
* write as factors
id NNLOrBT8(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT8*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d1^(-a2)*d2^(-a3)*d3^(-a4)*d4^(-a5)*d6^(-a6)*d5^(-a7);
#endprocedure

#procedure gNNLOrBT8(MM,M2ep)
* write as function
id NNLOrBT8*d7^a1?*d1^a2?*d2^a3?*d3^a4?*d4^a5?*d6^a6?*d5^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT8(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT8(MM)
* expansion of factors
if (match(NNLOrBT8)) 
  id d7 = (`MM')*x + v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT8)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT8)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
if (match(NNLOrBT8)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT8)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT8)) 
  id d6 = -2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT8)) 
  id d5 = 2*p1.v2 + v2.v2;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT8(MM)
* reduction of scalar products
if (match(NNLOrBT8)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT8)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(NNLOrBT8)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT8)) 
  id p1.v2 = (-d4 + d5)/2;
.sort
if (match(NNLOrBT8)) 
  id p2.v2 = (d4 - d6)/2;
.sort
if (match(NNLOrBT8)) 
  id v1.v2 = (-d1 - d4 + d7 - (`MM')*x)/2;
.sort
if (match(NNLOrBT8)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT8
* vanishing sub-topologies
id NNLOrBT8(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT8(a1?,a2?,a3?neg0_,a4?neg0_,a5?,a6?,a7?) = 0;
id NNLOrBT8(a1?,a2?,a3?neg0_,a4?,a5?,a6?,a7?neg0_) = 0;
id NNLOrBT8(a1?,a2?,a3?,a4?neg0_,a5?,a6?neg0_,a7?) = 0;
id NNLOrBT8(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?neg0_) = 0;
#endprocedure

#procedure yNNLOrBT8
#redefine top "NNLOrBT8"
* change notation
#call fNNLOrBT8(1,1);
* symmetries
if (match(NNLOrBT8));
repeat;

#if (`symNNLOrBT8' <= 7)
#call fsymm(d7\\\,d1\\\,d2\\\,d3\\\,d4\\\,d6\\\,d5\,\
            d7\\\,d1\\\,d3\\\,d2\\\,d4\\\,d5\\\,d6\,\
            d7\\\,d4\\\,d6\\\,d5\\\,d1\\\,d2\\\,d3\,\
            d7\\\,d4\\\,d5\\\,d6\\\,d1\\\,d3\\\,d2)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT8(1,1);
#endprocedure

#procedure sNNLOrBT8
* discard vanishing sub-topologies
#call zNNLOrBT8
.sort
* apply symmetries
#call yNNLOrBT8
.sort
#endprocedure

*--#] NNLOrBT8 :



*--#[ NNLOrBT9 :

*  
* Generated by TopoID-2.0 (2016-XX-XX) on 2016-06-14 14:58:47.
*  
*   Note: Delete this comment on modification.
*  

* topology line definitions:
*   1: d7 (gl), v1 + v2,  6 -- 5
*   2: d6 (hb), p2 - v2,  6 -- 4
*   3: d4 (gl), -v2,      4 -- 3
*   4: d5 (gl), p1 + v2,  5 -- 3
*   5: d3 (gl), -p2 - v1, 6 -- 2
*   6: d1 (gl), -v1,      2 -- 1
*   7: d2 (gl), -p1 + v1, 5 -- 1

#include fsymm.prc
#ifndef `symNNLOrBT9'
#define symNNLOrBT9 "0"
#endif

#define top "NNLOrBT9"
#define pNNLOrBT9 "p1,p2"
#define kNNLOrBT9 "v1,v2"
#define dNNLOrBT9 "d1,d2,d3,d4,d5,d6,d7"
#define vNNLOrBT9 "x"

#procedure fNNLOrBT9(MM,M2ep)
* write as factors
id NNLOrBT9(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
  = NNLOrBT9*(`M2ep')^(-2)*(`MM')^(-2*2 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    *d7^(-a1)*d6^(-a2)*d4^(-a3)*d5^(-a4)*d3^(-a5)*d1^(-a6)*d2^(-a7);
#endprocedure

#procedure gNNLOrBT9(MM,M2ep)
* write as function
id NNLOrBT9*d7^a1?*d6^a2?*d4^a3?*d5^a4?*d3^a5?*d1^a6?*d2^a7?
  = (`M2ep')^(+2)*(`MM')^(+2*2 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    *NNLOrBT9(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eNNLOrBT9(MM)
* expansion of factors
if (match(NNLOrBT9)) 
  id d7 = v1.v1 + 2*v1.v2 + v2.v2;
.sort
if (match(NNLOrBT9)) 
  id d6 = (`MM')*x - 2*p2.v2 + v2.v2;
.sort
if (match(NNLOrBT9)) 
  id d4 = v2.v2;
.sort
if (match(NNLOrBT9)) 
  id d5 = 2*p1.v2 + v2.v2;
.sort
if (match(NNLOrBT9)) 
  id d3 = 2*p2.v1 + v1.v1;
.sort
if (match(NNLOrBT9)) 
  id d1 = v1.v1;
.sort
if (match(NNLOrBT9)) 
  id d2 = -2*p1.v1 + v1.v1;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure cNNLOrBT9(MM)
* reduction of scalar products
if (match(NNLOrBT9)) 
  id p1.v1 = (d1 - d2)/2;
.sort
if (match(NNLOrBT9)) 
  id p2.v1 = (-d1 + d3)/2;
.sort
if (match(NNLOrBT9)) 
  id v1.v1 = d1;
.sort
if (match(NNLOrBT9)) 
  id p1.v2 = (-d4 + d5)/2;
.sort
if (match(NNLOrBT9)) 
  id p2.v2 = (d4 - d6 + (`MM')*x)/2;
.sort
if (match(NNLOrBT9)) 
  id v1.v2 = (-d1 - d4 + d7)/2;
.sort
if (match(NNLOrBT9)) 
  id v2.v2 = d4;
.sort
* kinematic constraints
id p1.p1 = 0;
id p2.p2 = 0;
id p1.p2 = -(`MM')/2;
.sort
#endprocedure

#procedure zNNLOrBT9
* vanishing sub-topologies
id NNLOrBT9(a1?,a2?neg0_,a3?,a4?,a5?,a6?,a7?) = 0;
id NNLOrBT9(a1?neg0_,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
id NNLOrBT9(a1?neg0_,a2?,a3?,a4?,a5?neg0_,a6?,a7?) = 0;
id NNLOrBT9(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?neg0_) = 0;
id NNLOrBT9(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
id NNLOrBT9(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?neg0_) = 0;
#endprocedure

#procedure yNNLOrBT9
#redefine top "NNLOrBT9"
* change notation
#call fNNLOrBT9(1,1);
* symmetries
if (match(NNLOrBT9));
repeat;

#if (`symNNLOrBT9' <= 6)
#call fsymm(d6\\\,d4\\\,d5\\\,d3\\\,d1\\\,d2\,\
            d6\\\,d4\\\,d5\\\,d2\\\,d1\\\,d3)
#endif

#if (`symNNLOrBT9' <= 5)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d3\,\
            d3\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d1\,\
            d1\\\,d6\\\,d4\\\,d5\\\,d7)
#call fsymm(d7\\\,d6\\\,d4\\\,d5\\\,d2\,\
            d2\\\,d6\\\,d4\\\,d5\\\,d7)
#endif

endrepeat;
endif;
* change notation
#call gNNLOrBT9(1,1);
#endprocedure

#procedure sNNLOrBT9
* discard vanishing sub-topologies
#call zNNLOrBT9
.sort
* apply symmetries
#call yNNLOrBT9
.sort
#endprocedure

*--#] NNLOrBT9 :

