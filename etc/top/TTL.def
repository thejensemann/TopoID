#define pTTL "p1,p2"
#define kTTL "v1,v2"
#define dTTL "D1,D2,D3,D4,D5,D6,D7"

* - p1,0 ->-@- D1,MM*x,v1 -<-----@- D3,0,p1+v2 ->---@- p1 ->- (p1 + p2)^2 = - MM
*            \   _______________ ^                  |
*  D7,0,v1+p1 V /      D6,0,p1+v1+v2                |
*              \                                    V D2,0,v2
*             / \_________________                  |
*            /                    \                 |
* - p2,0 ->-@- D5,0,p1-p2+v1+v2 -<-@- D4,0,p2-v2 ->-@- p2 ->-

#procedure fTTL(MM,M2ep)
  id TTL(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
    = `M2ep'^(-2) * (`MM')^(- 4 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    * D1^-a1*D2^-a2*D3^-a3*D4^-a4*D5^-a5*D6^-a6*D7^-a7;
#endprocedure

#procedure gTTL(MM,M2ep)
  id D1^a1?*D2^a2?*D3^a3?*D4^a4?*D5^a5?*D6^a6?*D7^a7?
    = `M2ep'^2 * (`MM')^(4 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    * TTL(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eTTL(MM)
  id D1 = v1.v1 + (`MM')*acc(x);
  id D2 = v2.v2;
  id D3 = v2.v2 + 2*p1.v2;
  id D4 = v2.v2 - 2*p2.v2;
  id D5 = v1.v1 + v2.v2 - 2*p1.p2 + 2*p1.v1 + 2*p1.v2 - 2*p2.v1 - 2*p2.v2 + 2*v1.v2;
  id D6 = v1.v1 + v2.v2 + 2*p1.v1 + 2*p1.v2 + 2*v1.v2;
  id D7 = v1.v1 + 2*p1.v1;
  id p1.p2 = - (`MM')/2;
  id p1.p1 = 0;
  id p2.p2 = 0;
#endprocedure

#procedure cTTL(MM)
  id p2.v1 = 1/2 * (- D5 + v1.v1 + v2.v2 - 2*p1.p2 + 2*p1.v1 + 2*p1.v2 - 2*p2.v2 + 2*v1.v2);
  id v1.v2 = 1/2 * (D6 - v1.v1 - v2.v2 - 2*p1.v1 - 2*p1.v2);
  id p2.v2 = 1/2 * (- D4 + v2.v2);
  id p1.v1 = 1/2 * (D7 - v1.v1);
  id p1.v2 = 1/2 * (D3 - v2.v2);
  id v1.v1 = D1 - (`MM')*acc(x);
  id v2.v2 = D2;
  id p1.p2 = - (`MM')/2;
  id p1.p1 = 0;
  id p2.p2 = 0;
#endprocedure

#procedure sTTL
* need only cut through 1,4,6
  id TTL(a1?neg0_,a2?,a3?,a4?,a5?,a6?,a7?) = 0;
  id TTL(a1?,a2?,a3?,a4?neg0_,a5?,a6?,a7?) = 0;
  id TTL(a1?,a2?,a3?,a4?,a5?,a6?neg0_,a7?) = 0;
#endprocedure
