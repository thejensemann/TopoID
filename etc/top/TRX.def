#define pTRX "p1,p2"
#define kTRX "v1,v2"
#define dTRX "D1,D2,D3,D4,D5,D6,D7"

*             D3,0
* - p1,0 ->-@-----@- D5,0 -  p0^2 = (p1 + p2)^2 = - MM
*            \   /         |
*     D1,0,v1 ^ ^ D2,0,v2  |
*              /           @- p0,1 ->-
*             / \          |
*            /   \         |
* - p2,0 ->-@-----@- D6,0 -
*             D4,0

#procedure fTRX(MM,M2ep)
  id TRX(a1?,a2?,a3?,a4?,a5?,a6?,a7?)
    = `M2ep'^(-2) * (`MM')^(- 4 - a1 - a2 - a3 - a4 - a5 - a6 - a7)
    * D1^-a1*D2^-a2*D3^-a3*D4^-a4*D5^-a5*D6^-a6*D7^-a7;
#endprocedure

#procedure gTRX(MM,M2ep)
  id D1^a1?*D2^a2?*D3^a3?*D4^a4?*D5^a5?*D6^a6?*D7^a7?
    = `M2ep'^2 * (`MM')^(4 + a1 + a2 + a3 + a4 + a5 + a6 + a7)
    * TRX(-a1,-a2,-a3,-a4,-a5,-a6,-a7);
#endprocedure

#procedure eTRX(MM)
  id D1 = v1.v1;
  id D2 = v2.v2;
  id D3 = v1.v1 + 2*p1.v1;
  id D4 = v2.v2 - 2*p2.v2;
  id D5 = v1.v1 + v2.v2 + 2*p1.v1 + 2*p1.v2 + 2*v1.v2;
  id D6 = v1.v1 + v2.v2 - 2*p2.v1 - 2*p2.v2 + 2*v1.v2;
  id D7 = 2*p2.v1;
  id p1.p1 = 0;
  id p2.p2 = 0;
  id p1.p2 = - (`MM')/2;
#endprocedure

#procedure cTRX(MM)
  id p1.v2 = 1/2 * (D5 - v1.v1 - v2.v2 - 2*p1.v1 - 2*v1.v2);
  id v1.v2 = 1/2 * (D6 - v1.v1 - v2.v2 + 2*p2.v1 + 2*p2.v2);
  id p2.v2 = 1/2 * (- D4 + v2.v2);
  id p1.v1 = 1/2 * (D3 - v1.v1);
  id p2.v1 = 1/2 * D7;
  id v1.v1 = D1;
  id v2.v2 = D2;
  id p1.p1 = 0;
  id p2.p2 = 0;
  id p1.p2 = - (`MM')/2;
#endprocedure

#procedure sTRX
* zeros
  id TRX(a1?,a2?neg0_,a3?,a4?neg0_,a5?,a6?,a7?neg0_) = 0;
  id TRX(a1?neg0_,a2?,a3?neg0_,a4?,a5?,a6?,a7?neg0_) = 0;
  id TRX(a1?,a2?,a3?,a4?neg0_,a5?,a6?neg0_,a7?neg0_) = 0;
  id TRX(a1?,a2?,a3?neg0_,a4?,a5?neg0_,a6?,a7?neg0_) = 0;
  id TRX(a1?,a2?,a3?,a4?,a5?neg0_,a6?neg0_,a7?neg0_) = 0;
#endprocedure
