//
// gen-1.7:
//   filtered QGRAF output by
//   underlying cuts,
//   color structures
//

// Tue Nov  4 10:18:18 2014

//
// qgraf-3.1.4:
//   output style by Alexey Pak,
//   modified by Jens Hoff
//

*--#[ PROLOGUE :

* qgraf.dat parameters:

*   output        = '1.tt.raw';
*   style         = '/users/ttp/jens/dev/bin/gen-new/qgraf.sty';
*   model         = 'qgraf.mod';
*   in            = gl[p1],gl[p2];
*   out           = gl[p1],gl[p2];
*   loops         = 1;
*   loop_momentum = v;
*   options       = onshell,nosnail,notadpole;
*   true = iprop[hb,1,1];

*--#] PROLOGUE :


/************************************************/

// FORM representation

*--#[ D1 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,p1,p2,-p1-p2) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,-p1,-p2,p1+p2) *
  cV(3,gl,gl,hb,3*3+1,3*3+2,3*3+3,p1+p2,v1-p1-p2,-v1) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-p1-p2,-v1+p1+p2,v1) *

* propagators:
  cP(gl,1*3+3,3*3+1,-p1-p2) *
  cP(gl,2*3+3,4*3+1,p1+p2) *
  cP(gl,3*3+2,4*3+2,v1-p1-p2) *
  cP(hb,3*3+3,4*3+3,-v1) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,1*3+2,p2) *
  cO(gl,2*3+1,3,p1) *
  cO(gl,2*3+2,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D1 :

// GraphViz representation

graph "1" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 1, originally 1 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--1 [label="I gl(p2)",color=red,style=solid];
  2--out1 [label="O gl(p1)",color=red,style=solid];
  2--out2 [label="O gl(p2)",color=red,style=solid];
  1--3 [label="gl(-p1-p2)",color=red,style=solid];
  2--4 [label="gl(p1+p2)",color=red,style=solid];
  3--4 [label="gl(v1-p1-p2)",color=red,style=solid];
  3--4 [label="hb(-v1)",color=black,style=dashed];
};


/************************************************/

// FORM representation

*--#[ D2 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,p1,p2,-p1-p2) *
  cV(3,gl,gl,hb,2*3+1,2*3+2,2*3+3,-p1,-p2,p1+p2) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,p1+p2,v1-p1-p2,-v1) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-v1+p1+p2,v1,-p1-p2) *

* propagators:
  cP(gl,1*3+3,3*3+1,-p1-p2) *
  cP(hb,2*3+3,4*3+3,p1+p2) *
  cP(gl,3*3+2,4*3+1,v1-p1-p2) *
  cP(gl,3*3+3,4*3+2,-v1) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,1*3+2,p2) *
  cO(gl,2*3+1,3,p1) *
  cO(gl,2*3+2,4,p2) *

* symmetry factor:
  (+1/2);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D2 :

// GraphViz representation

graph "2" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 2, originally 2 (factor = +1/2)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--1 [label="I gl(p2)",color=red,style=solid];
  2--out1 [label="O gl(p1)",color=red,style=solid];
  2--out2 [label="O gl(p2)",color=red,style=solid];
  1--3 [label="gl(-p1-p2)",color=red,style=solid];
  2--4 [label="hb(p1+p2)",color=black,style=dashed];
  3--4 [label="gl(v1-p1-p2)",color=red,style=solid];
  3--4 [label="gl(-v1)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D3 :

* vertices:
  cV(3,gl,gl,hb,1*3+1,1*3+2,1*3+3,p1,p2,-p1-p2) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,-p1,-p2,p1+p2) *
  cV(3,gl,gl,hb,3*3+1,3*3+2,3*3+3,v1-p1-p2,-v1,p1+p2) *
  cV(3,gl,gl,gl,4*3+1,4*3+2,4*3+3,-p1-p2,-v1+p1+p2,v1) *

* propagators:
  cP(hb,1*3+3,3*3+3,-p1-p2) *
  cP(gl,2*3+3,4*3+1,p1+p2) *
  cP(gl,3*3+1,4*3+2,v1-p1-p2) *
  cP(gl,3*3+2,4*3+3,-v1) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,1*3+2,p2) *
  cO(gl,2*3+1,3,p1) *
  cO(gl,2*3+2,4,p2) *

* symmetry factor:
  (+1/2);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D3 :

// GraphViz representation

graph "3" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 3, originally 3 (factor = +1/2)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--1 [label="I gl(p2)",color=red,style=solid];
  2--out1 [label="O gl(p1)",color=red,style=solid];
  2--out2 [label="O gl(p2)",color=red,style=solid];
  1--3 [label="hb(-p1-p2)",color=black,style=dashed];
  2--4 [label="gl(p1+p2)",color=red,style=solid];
  3--4 [label="gl(v1-p1-p2)",color=red,style=solid];
  3--4 [label="gl(-v1)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D4 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,p1,p2,-p1-p2) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,-p1,-v1,v1+p1) *
  cV(3,gl,gl,hb,3*3+1,3*3+2,3*3+3,-p2,v1,-v1+p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,p1+p2,-v1-p1,v1-p2) *

* propagators:
  cP(gl,1*3+3,4*3+1,-p1-p2) *
  cP(gl,2*3+2,3*3+2,-v1) *
  cP(gl,2*3+3,4*3+2,v1+p1) *
  cP(hb,3*3+3,4*3+3,-v1+p2) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,1*3+2,p2) *
  cO(gl,2*3+1,3,p1) *
  cO(gl,3*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D4 :

// GraphViz representation

graph "4" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 4, originally 10 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--1 [label="I gl(p2)",color=red,style=solid];
  2--out1 [label="O gl(p1)",color=red,style=solid];
  3--out2 [label="O gl(p2)",color=red,style=solid];
  1--4 [label="gl(-p1-p2)",color=red,style=solid];
  2--3 [label="gl(-v1)",color=red,style=solid];
  2--4 [label="gl(v1+p1)",color=red,style=solid];
  3--4 [label="hb(-v1+p2)",color=black,style=dashed];
};


/************************************************/

// FORM representation

*--#[ D5 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,p1,p2,-p1-p2) *
  cV(3,gl,gl,hb,2*3+1,2*3+2,2*3+3,-p1,-v1,v1+p1) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,-p2,v1,-v1+p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,p1+p2,v1-p2,-v1-p1) *

* propagators:
  cP(gl,1*3+3,4*3+1,-p1-p2) *
  cP(gl,2*3+2,3*3+2,-v1) *
  cP(hb,2*3+3,4*3+3,v1+p1) *
  cP(gl,3*3+3,4*3+2,-v1+p2) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,1*3+2,p2) *
  cO(gl,2*3+1,3,p1) *
  cO(gl,3*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D5 :

// GraphViz representation

graph "5" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 5, originally 11 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--1 [label="I gl(p2)",color=red,style=solid];
  2--out1 [label="O gl(p1)",color=red,style=solid];
  3--out2 [label="O gl(p2)",color=red,style=solid];
  1--4 [label="gl(-p1-p2)",color=red,style=solid];
  2--3 [label="gl(-v1)",color=red,style=solid];
  2--4 [label="hb(v1+p1)",color=black,style=dashed];
  3--4 [label="gl(-v1+p2)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D6 :

* vertices:
  cV(3,gl,gl,hb,1*3+1,1*3+2,1*3+3,p1,p2,-p1-p2) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,-p1,-v1,v1+p1) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,-p2,v1,-v1+p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-v1-p1,v1-p2,p1+p2) *

* propagators:
  cP(hb,1*3+3,4*3+3,-p1-p2) *
  cP(gl,2*3+2,3*3+2,-v1) *
  cP(gl,2*3+3,4*3+1,v1+p1) *
  cP(gl,3*3+3,4*3+2,-v1+p2) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,1*3+2,p2) *
  cO(gl,2*3+1,3,p1) *
  cO(gl,3*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D6 :

// GraphViz representation

graph "6" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 6, originally 13 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--1 [label="I gl(p2)",color=red,style=solid];
  2--out1 [label="O gl(p1)",color=red,style=solid];
  3--out2 [label="O gl(p2)",color=red,style=solid];
  1--4 [label="hb(-p1-p2)",color=black,style=dashed];
  2--3 [label="gl(-v1)",color=red,style=solid];
  2--4 [label="gl(v1+p1)",color=red,style=solid];
  3--4 [label="gl(-v1+p2)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D7 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,-p1,-p2,p1+p2) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,hb,3*3+1,3*3+2,3*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-p1-p2,-v1+p1,v1+p2) *

* propagators:
  cP(gl,1*3+3,4*3+1,p1+p2) *
  cP(gl,2*3+2,3*3+2,-v1) *
  cP(gl,2*3+3,4*3+2,v1-p1) *
  cP(hb,3*3+3,4*3+3,-v1-p2) *

* legs:
  cI(gl,1,2*3+1,p1) *
  cI(gl,2,3*3+1,p2) *
  cO(gl,1*3+1,3,p1) *
  cO(gl,1*3+2,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D7 :

// GraphViz representation

graph "7" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 7, originally 30 (factor = +1)";
  in1--2 [label="I gl(p1)",color=red,style=solid];
  in2--3 [label="I gl(p2)",color=red,style=solid];
  1--out1 [label="O gl(p1)",color=red,style=solid];
  1--out2 [label="O gl(p2)",color=red,style=solid];
  1--4 [label="gl(p1+p2)",color=red,style=solid];
  2--3 [label="gl(-v1)",color=red,style=solid];
  2--4 [label="gl(v1-p1)",color=red,style=solid];
  3--4 [label="hb(-v1-p2)",color=black,style=dashed];
};


/************************************************/

// FORM representation

*--#[ D8 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,-p1,-p2,p1+p2) *
  cV(3,gl,gl,hb,2*3+1,2*3+2,2*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-p1-p2,v1+p2,-v1+p1) *

* propagators:
  cP(gl,1*3+3,4*3+1,p1+p2) *
  cP(gl,2*3+2,3*3+2,-v1) *
  cP(hb,2*3+3,4*3+3,v1-p1) *
  cP(gl,3*3+3,4*3+2,-v1-p2) *

* legs:
  cI(gl,1,2*3+1,p1) *
  cI(gl,2,3*3+1,p2) *
  cO(gl,1*3+1,3,p1) *
  cO(gl,1*3+2,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D8 :

// GraphViz representation

graph "8" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 8, originally 31 (factor = +1)";
  in1--2 [label="I gl(p1)",color=red,style=solid];
  in2--3 [label="I gl(p2)",color=red,style=solid];
  1--out1 [label="O gl(p1)",color=red,style=solid];
  1--out2 [label="O gl(p2)",color=red,style=solid];
  1--4 [label="gl(p1+p2)",color=red,style=solid];
  2--3 [label="gl(-v1)",color=red,style=solid];
  2--4 [label="hb(v1-p1)",color=black,style=dashed];
  3--4 [label="gl(-v1-p2)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D9 :

* vertices:
  cV(3,gl,gl,hb,1*3+1,1*3+2,1*3+3,-p1,-p2,p1+p2) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-v1+p1,v1+p2,-p1-p2) *

* propagators:
  cP(hb,1*3+3,4*3+3,p1+p2) *
  cP(gl,2*3+2,3*3+2,-v1) *
  cP(gl,2*3+3,4*3+1,v1-p1) *
  cP(gl,3*3+3,4*3+2,-v1-p2) *

* legs:
  cI(gl,1,2*3+1,p1) *
  cI(gl,2,3*3+1,p2) *
  cO(gl,1*3+1,3,p1) *
  cO(gl,1*3+2,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D9 :

// GraphViz representation

graph "9" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 9, originally 33 (factor = +1)";
  in1--2 [label="I gl(p1)",color=red,style=solid];
  in2--3 [label="I gl(p2)",color=red,style=solid];
  1--out1 [label="O gl(p1)",color=red,style=solid];
  1--out2 [label="O gl(p2)",color=red,style=solid];
  1--4 [label="hb(p1+p2)",color=black,style=dashed];
  2--3 [label="gl(-v1)",color=red,style=solid];
  2--4 [label="gl(v1-p1)",color=red,style=solid];
  3--4 [label="gl(-v1-p2)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D10 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,hb,2*3+1,2*3+2,2*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,-p1,-v1+p1,v1-p1+p1) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-p2,-v1+p1-p1,v1+p2) *

* propagators:
  cP(gl,1*3+2,2*3+2,-v1) *
  cP(gl,1*3+3,3*3+2,v1-p1) *
  cP(hb,2*3+3,4*3+3,-v1-p2) *
  cP(gl,3*3+3,4*3+2,v1-p1+p1) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,2*3+1,p2) *
  cO(gl,3*3+1,3,p1) *
  cO(gl,4*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D10 :

// GraphViz representation

graph "10" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 10, originally 35 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--2 [label="I gl(p2)",color=red,style=solid];
  3--out1 [label="O gl(p1)",color=red,style=solid];
  4--out2 [label="O gl(p2)",color=red,style=solid];
  1--2 [label="gl(-v1)",color=red,style=solid];
  1--3 [label="gl(v1-p1)",color=red,style=solid];
  2--4 [label="hb(-v1-p2)",color=black,style=dashed];
  3--4 [label="gl(v1-p1+p1)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D11 :

* vertices:
  cV(3,gl,gl,hb,1*3+1,1*3+2,1*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,hb,3*3+1,3*3+2,3*3+3,-p1,v1-p1+p1,-v1+p1) *
  cV(3,gl,gl,gl,4*3+1,4*3+2,4*3+3,-p2,v1+p2,-v1+p1-p1) *

* propagators:
  cP(gl,1*3+2,2*3+2,-v1) *
  cP(hb,1*3+3,3*3+3,v1-p1) *
  cP(gl,2*3+3,4*3+2,-v1-p2) *
  cP(gl,3*3+2,4*3+3,v1-p1+p1) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,2*3+1,p2) *
  cO(gl,3*3+1,3,p1) *
  cO(gl,4*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D11 :

// GraphViz representation

graph "11" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 11, originally 36 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--2 [label="I gl(p2)",color=red,style=solid];
  3--out1 [label="O gl(p1)",color=red,style=solid];
  4--out2 [label="O gl(p2)",color=red,style=solid];
  1--2 [label="gl(-v1)",color=red,style=solid];
  1--3 [label="hb(v1-p1)",color=black,style=dashed];
  2--4 [label="gl(-v1-p2)",color=red,style=solid];
  3--4 [label="gl(v1-p1+p1)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D12 :

* vertices:
  cV(3,gl,gl,gl,1*3+1,1*3+2,1*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,hb,2*3+1,2*3+2,2*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,gl,3*3+1,3*3+2,3*3+3,-p2,-v1+p1,v1-p1+p2) *
  cV(3,gl,gl,hb,4*3+1,4*3+2,4*3+3,-p1,-v1+p1-p2,v1+p2) *

* propagators:
  cP(gl,1*3+2,2*3+2,-v1) *
  cP(gl,1*3+3,3*3+2,v1-p1) *
  cP(hb,2*3+3,4*3+3,-v1-p2) *
  cP(gl,3*3+3,4*3+2,v1-p1+p2) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,2*3+1,p2) *
  cO(gl,4*3+1,3,p1) *
  cO(gl,3*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D12 :

// GraphViz representation

graph "12" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 12, originally 39 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--2 [label="I gl(p2)",color=red,style=solid];
  4--out1 [label="O gl(p1)",color=red,style=solid];
  3--out2 [label="O gl(p2)",color=red,style=solid];
  1--2 [label="gl(-v1)",color=red,style=solid];
  1--3 [label="gl(v1-p1)",color=red,style=solid];
  2--4 [label="hb(-v1-p2)",color=black,style=dashed];
  3--4 [label="gl(v1-p1+p2)",color=red,style=solid];
};


/************************************************/

// FORM representation

*--#[ D13 :

* vertices:
  cV(3,gl,gl,hb,1*3+1,1*3+2,1*3+3,p1,-v1,v1-p1) *
  cV(3,gl,gl,gl,2*3+1,2*3+2,2*3+3,p2,v1,-v1-p2) *
  cV(3,gl,gl,hb,3*3+1,3*3+2,3*3+3,-p2,v1-p1+p2,-v1+p1) *
  cV(3,gl,gl,gl,4*3+1,4*3+2,4*3+3,-p1,v1+p2,-v1+p1-p2) *

* propagators:
  cP(gl,1*3+2,2*3+2,-v1) *
  cP(hb,1*3+3,3*3+3,v1-p1) *
  cP(gl,2*3+3,4*3+2,-v1-p2) *
  cP(gl,3*3+2,4*3+3,v1-p1+p2) *

* legs:
  cI(gl,1,1*3+1,p1) *
  cI(gl,2,2*3+1,p2) *
  cO(gl,4*3+1,3,p1) *
  cO(gl,3*3+1,4,p2) *

* symmetry factor:
  (+1);

* numbers of loops, legs, vertices, propagators:
  #define NLOOP "1"
  #define NLEGS "4"
  #define NVERT "4"
  #define NPROP "4"

*--#] D13 :

// GraphViz representation

graph "13" {
  graph [overlap=false];
  node [shape=point];
  label="diagram 13, originally 40 (factor = +1)";
  in1--1 [label="I gl(p1)",color=red,style=solid];
  in2--2 [label="I gl(p2)",color=red,style=solid];
  4--out1 [label="O gl(p1)",color=red,style=solid];
  3--out2 [label="O gl(p2)",color=red,style=solid];
  1--2 [label="gl(-v1)",color=red,style=solid];
  1--3 [label="hb(v1-p1)",color=black,style=dashed];
  2--4 [label="gl(-v1-p2)",color=red,style=solid];
  3--4 [label="gl(v1-p1+p2)",color=red,style=solid];
};


/************************************************/

*--#[ EPILOGUE :

* number of diagrams
  #define NDIAS "13"

*--#] EPILOGUE :

NDIAS=13

